[
  {
    "name": "GroupOperationVariant",
    "docs": "Types of operations specific to group theory",
    "kind": "enum",
    "members": [
      {
        "name": "Multiplication",
        "docs": "Standard multiplication (used in most abstract groups)",
        "type_info": null
      },
      {
        "name": "Addition",
        "docs": "Addition (used in additive groups)",
        "type_info": null
      },
      {
        "name": "Composition",
        "docs": "Composition (used in transformation groups)",
        "type_info": null
      },
      {
        "name": "MatrixMultiplication",
        "docs": "Matrix multiplication (for matrix groups)",
        "type_info": null
      },
      {
        "name": "DirectProduct",
        "docs": "Direct product of groups",
        "type_info": null
      },
      {
        "name": "SemidirectProduct",
        "docs": "Semidirect product of groups",
        "type_info": null
      },
      {
        "name": "FreeProduct",
        "docs": "Free product (used in combinatorial group theory)",
        "type_info": null
      }
    ]
  },
  {
    "name": "GroupNotation",
    "docs": "Notation used for group operations",
    "kind": "enum",
    "members": [
      {
        "name": "Infix",
        "docs": "Infix notation: a * b",
        "type_info": "GroupSymbol"
      },
      {
        "name": "Function",
        "docs": "Function notation: f(a, b)",
        "type_info": "String"
      },
      {
        "name": "Juxtaposition",
        "docs": "Juxtaposition: ab (for multiplication)",
        "type_info": null
      }
    ]
  },
  {
    "name": "GroupSymbol",
    "docs": "Common symbols used in group theory",
    "kind": "enum",
    "members": [
      {
        "name": "Times",
        "docs": "Multiplication: ×",
        "type_info": null
      },
      {
        "name": "Dot",
        "docs": "Multiplication: ·",
        "type_info": null
      },
      {
        "name": "Asterisk",
        "docs": "Multiplication: *",
        "type_info": null
      },
      {
        "name": "Plus",
        "docs": "Addition: +",
        "type_info": null
      },
      {
        "name": "Circle",
        "docs": "Circle: ∘",
        "type_info": null
      },
      {
        "name": "SemiDirectLeft",
        "docs": "Semidirect product: ⋊",
        "type_info": null
      },
      {
        "name": "SemiDirectRight",
        "docs": "Semidirect product: ⋉",
        "type_info": null
      },
      {
        "name": "DirectProduct",
        "docs": "Direct product: ×",
        "type_info": null
      }
    ]
  },
  {
    "name": "GroupIdentity",
    "docs": "Identity element for group operations",
    "kind": "enum",
    "members": [
      {
        "name": "One",
        "docs": "Multiplicative identity: 1",
        "type_info": null
      },
      {
        "name": "Zero",
        "docs": "Additive identity: 0",
        "type_info": null
      },
      {
        "name": "IdentityMatrix",
        "docs": "Identity matrix",
        "type_info": null
      },
      {
        "name": "IdentityPermutation",
        "docs": "Identity permutation",
        "type_info": null
      },
      {
        "name": "IdentityFunction",
        "docs": "Identity function",
        "type_info": null
      }
    ]
  },
  {
    "name": "GroupInverse",
    "docs": "Inverse operation types in group theory",
    "kind": "enum",
    "members": [
      {
        "name": "MultiplicativeInverse",
        "docs": "Multiplicative inverse: x⁻¹",
        "type_info": null
      },
      {
        "name": "AdditiveInverse",
        "docs": "Additive inverse: -x",
        "type_info": null
      },
      {
        "name": "MatrixInverse",
        "docs": "Matrix inverse",
        "type_info": null
      },
      {
        "name": "PermutationInverse",
        "docs": "Permutation inverse",
        "type_info": null
      },
      {
        "name": "FunctionInverse",
        "docs": "Function inverse (for function composition groups)",
        "type_info": null
      }
    ]
  },
  {
    "name": "GroupInverseApplication",
    "docs": "How inverses are applied in groups",
    "kind": "enum",
    "members": [
      {
        "name": "Left",
        "docs": "Left inverse: b*a = e",
        "type_info": null
      },
      {
        "name": "Right",
        "docs": "Right inverse: a*b = e",
        "type_info": null
      },
      {
        "name": "TwoSided",
        "docs": "Two-sided inverse: a*b = b*a = e (standard for groups)",
        "type_info": null
      }
    ]
  },
  {
    "name": "GroupOperationProperty",
    "docs": "Properties specific to group operations",
    "kind": "enum",
    "members": [
      {
        "name": "Associative",
        "docs": "Whether the operation is associative (required for groups)",
        "type_info": null
      },
      {
        "name": "Commutative",
        "docs": "Whether the operation is commutative",
        "type_info": "bool"
      },
      {
        "name": "Closed",
        "docs": "Whether the operation is closed (required for groups)",
        "type_info": null
      }
    ]
  },
  {
    "name": "GroupOperation",
    "docs": "Complete binary operation structure specific to group theory",
    "kind": "struct",
    "members": [
      {
        "name": "operation_type",
        "type": "GroupOperationVariant",
        "docs": "Type of operation"
      },
      {
        "name": "notation",
        "type": "GroupNotation",
        "docs": "Notation/symbol used for this operation"
      },
      {
        "name": "identity",
        "type": "GroupIdentity",
        "docs": "Identity element (required for groups)"
      },
      {
        "name": "inverse",
        "type": "GroupInverse",
        "docs": "Inverse operation (required for groups)"
      },
      {
        "name": "inverse_application",
        "type": "GroupInverseApplication",
        "docs": "How inverses are applied (usually two-sided in groups)"
      },
      {
        "name": "properties",
        "type": "Vec<GroupOperationProperty>",
        "docs": "Properties of this operation"
      },
      {
        "name": "product_info",
        "type": "Option<ProductInfo>",
        "docs": "For product operations, contains information about the product structure"
      }
    ]
  },
  {
    "name": "ProductInfo",
    "docs": "Information about product operations",
    "kind": "struct",
    "members": [
      {
        "name": "operation",
        "type": "ProductOperation",
        "docs": "The type of product operation"
      },
      {
        "name": "action",
        "type": "Option<String>",
        "docs": "For semidirect products, the action mapping"
      },
      {
        "name": "homomorphism",
        "type": "Option<String>",
        "docs": "For fibered products, the homomorphism"
      },
      {
        "name": "properties",
        "type": "VariantSet<ProductProperty>",
        "docs": "Properties specific to this product operation"
      }
    ]
  },
  {
    "name": "GenericGroup",
    "docs": "Core algebraic structure of a group, containing the minimal data needed to satisfy group axioms",
    "kind": "struct",
    "members": [
      {
        "name": "base_set",
        "type": "Set",
        "docs": "The underlying set"
      },
      {
        "name": "operation",
        "type": "GroupOperation",
        "docs": "The binary operation with its properties"
      },
      {
        "name": "props",
        "type": "VariantSet<GroupProperty>",
        "docs": "Properties specific to the group structure"
      }
    ]
  },
  {
    "name": "ProductOperation",
    "docs": "Type of product operation used to form a product group",
    "kind": "enum",
    "members": [
      {
        "name": "Direct",
        "docs": "Direct product (×): Cartesian product with componentwise operation",
        "type_info": null
      },
      {
        "name": "Semidirect",
        "docs": "The action defining the semidirect product",
        "type_info": "{\n        action: Box<GroupAction>,\n    }"
      },
      {
        "name": "Free",
        "docs": "Free product (*): No relations between the groups",
        "type_info": null
      },
      {
        "name": "Wreath",
        "docs": "Wreath product (≀): Special semidirect product with permutation action",
        "type_info": null
      },
      {
        "name": "Central",
        "docs": "Central product: Quotient of direct product",
        "type_info": null
      },
      {
        "name": "Fibered",
        "docs": "The homomorphism defining the fibered product",
        "type_info": "{\n        homomorphism: Box<GroupHomomorphism>,\n    }"
      }
    ]
  },
  {
    "name": "ProductGroup",
    "docs": "A product group combining two or more groups with a specific operation",
    "kind": "struct",
    "members": [
      {
        "name": "core",
        "type": "GenericGroup",
        "docs": "The core algebraic group structure"
      },
      {
        "name": "operation",
        "type": "ProductOperation",
        "docs": "The type of product operation used"
      },
      {
        "name": "components",
        "type": "Vec<Box<Group>>",
        "docs": "The component groups"
      },
      {
        "name": "normal_component",
        "type": "Option<usize>",
        "docs": "For semidirect products, identifies which component is normal"
      },
      {
        "name": "product_props",
        "type": "VariantSet<ProductProperty>",
        "docs": "Product specific properties"
      }
    ]
  },
  {
    "name": "Group",
    "docs": "A unified wrapper for all group-like structures",
    "kind": "enum",
    "members": [
      {
        "name": "Generic",
        "docs": "Basic abstract group",
        "type_info": "GenericGroup"
      },
      {
        "name": "Topological",
        "docs": "",
        "type_info": "TopologicalGroup"
      },
      {
        "name": "Lie",
        "docs": "",
        "type_info": "LieGroup"
      },
      {
        "name": "Cyclic",
        "docs": "",
        "type_info": "CyclicGroup"
      },
      {
        "name": "Symmetric",
        "docs": "",
        "type_info": "SymmetricGroup"
      },
      {
        "name": "Dihedral",
        "docs": "",
        "type_info": "DihedralGroup"
      },
      {
        "name": "GeneralLinear",
        "docs": "",
        "type_info": "GeneralLinearGroup"
      },
      {
        "name": "SpecialLinear",
        "docs": "",
        "type_info": "SpecialLinearGroup"
      },
      {
        "name": "Orthogonal",
        "docs": "",
        "type_info": "OrthogonalGroup"
      },
      {
        "name": "SpecialOrthogonal",
        "docs": "",
        "type_info": "SpecialOrthogonalGroup"
      },
      {
        "name": "Unitary",
        "docs": "",
        "type_info": "UnitaryGroup"
      },
      {
        "name": "SpecialUnitary",
        "docs": "",
        "type_info": "SpecialUnitaryGroup"
      },
      {
        "name": "Alternating",
        "docs": "",
        "type_info": "AlternatingGroup"
      },
      {
        "name": "ModularAdditive",
        "docs": "",
        "type_info": "ModularAdditiveGroup"
      },
      {
        "name": "ModularMultiplicative",
        "docs": "",
        "type_info": "ModularMultiplicativeGroup"
      },
      {
        "name": "Free",
        "docs": "",
        "type_info": "FreeGroup"
      },
      {
        "name": "Trivial",
        "docs": "",
        "type_info": "TrivialGroup"
      },
      {
        "name": "Product",
        "docs": "",
        "type_info": "ProductGroup"
      },
      {
        "name": "Quotient",
        "docs": "",
        "type_info": "QuotientGroup"
      },
      {
        "name": "Kernel",
        "docs": "",
        "type_info": "KernelGroup"
      },
      {
        "name": "Image",
        "docs": "",
        "type_info": "ImageGroup"
      },
      {
        "name": "Center",
        "docs": "",
        "type_info": "CenterGroup"
      },
      {
        "name": "GeneratedSubgroup",
        "docs": "",
        "type_info": "GeneratedSubgroup"
      },
      {
        "name": "Normalizer",
        "docs": "",
        "type_info": "NormalizerGroup"
      },
      {
        "name": "Centralizer",
        "docs": "",
        "type_info": "CentralizerGroup"
      },
      {
        "name": "CommutatorSubgroup",
        "docs": "",
        "type_info": "CommutatorSubgroup"
      },
      {
        "name": "SylowSubgroup",
        "docs": "",
        "type_info": "SylowSubgroup"
      },
      {
        "name": "WreathProduct",
        "docs": "",
        "type_info": "WreathProductGroup"
      },
      {
        "name": "CentralProduct",
        "docs": "",
        "type_info": "CentralProductGroup"
      },
      {
        "name": "Pullback",
        "docs": "",
        "type_info": "PullbackGroup"
      },
      {
        "name": "Restriction",
        "docs": "",
        "type_info": "RestrictionGroup"
      }
    ]
  },
  {
    "name": "PreservationVariant",
    "docs": "Variants for property preservation",
    "kind": "enum",
    "members": [
      {
        "name": "PreservesFiniteness",
        "docs": "Preserves finiteness",
        "type_info": null
      },
      {
        "name": "PreservesCommutativity",
        "docs": "Preserves commutativity",
        "type_info": null
      },
      {
        "name": "PreservesOther",
        "docs": "Preserves other properties",
        "type_info": "String"
      }
    ]
  },
  {
    "name": "ComplexityVariant",
    "docs": "Variants for construction complexity",
    "kind": "enum",
    "members": [
      {
        "name": "Simple",
        "docs": "Simple construction",
        "type_info": null
      },
      {
        "name": "Moderate",
        "docs": "Moderate complexity",
        "type_info": null
      },
      {
        "name": "Complex",
        "docs": "Complex construction",
        "type_info": null
      }
    ]
  },
  {
    "name": "CanonicityVariant",
    "docs": "Variants for construction canonicity",
    "kind": "enum",
    "members": [
      {
        "name": "Canonical",
        "docs": "The construction method yields a canonically defined object,\nindependent of specific choices within the variant data.",
        "type_info": null
      },
      {
        "name": "NonCanonical",
        "docs": "The construction method is either inherently non-canonical, or its\nresulting object's canonicity depends on the specific choices\n(e.g., generators, homomorphisms) provided in the variant's data fields.",
        "type_info": null
      }
    ]
  },
  {
    "name": "GroupProperty",
    "docs": "Properties specific to groups",
    "kind": "enum",
    "members": [
      {
        "name": "Abelian",
        "docs": "Commutativity properties",
        "type_info": "AbelianPropertyVariant"
      },
      {
        "name": "Finite",
        "docs": "Finiteness properties",
        "type_info": "FinitePropertyVariant"
      },
      {
        "name": "Simple",
        "docs": "Simplicity properties",
        "type_info": "SimplePropertyVariant"
      },
      {
        "name": "Solvable",
        "docs": "Solvability properties",
        "type_info": "SolvablePropertyVariant"
      },
      {
        "name": "Nilpotent",
        "docs": "Nilpotency properties",
        "type_info": "NilpotentPropertyVariant"
      }
    ]
  },
  {
    "name": "TopologicalGroupProperty",
    "docs": "Properties specific to topological groups",
    "kind": "enum",
    "members": [
      {
        "name": "Compact",
        "docs": "Compactness properties",
        "type_info": "CompactPropertyVariant"
      },
      {
        "name": "Connected",
        "docs": "Connectedness properties",
        "type_info": "ConnectedPropertyVariant"
      },
      {
        "name": "Metrizable",
        "docs": "Metrizability properties",
        "type_info": "MetrizablePropertyVariant"
      }
    ]
  },
  {
    "name": "LieGroupProperty",
    "docs": "Properties specific to Lie groups",
    "kind": "enum",
    "members": [
      {
        "name": "Semisimple",
        "docs": "Semisimplicity properties",
        "type_info": "SemisimplePropertyVariant"
      },
      {
        "name": "Reductive",
        "docs": "Reductivity properties",
        "type_info": "ReductivePropertyVariant"
      }
    ]
  },
  {
    "name": "AbelianPropertyVariant",
    "docs": "Types of abelian groups",
    "kind": "enum",
    "members": [
      {
        "name": "Abelian",
        "docs": "Commutative",
        "type_info": null
      },
      {
        "name": "NonAbelian",
        "docs": "Non-commutative",
        "type_info": null
      }
    ]
  },
  {
    "name": "FinitePropertyVariant",
    "docs": "Types of finite groups",
    "kind": "enum",
    "members": [
      {
        "name": "Finite",
        "docs": "Finite order",
        "type_info": "u32"
      },
      {
        "name": "Infinite",
        "docs": "Infinite order",
        "type_info": null
      },
      {
        "name": "LocallyFinite",
        "docs": "Locally finite (every finitely generated subgroup is finite)",
        "type_info": null
      }
    ]
  },
  {
    "name": "SimplePropertyVariant",
    "docs": "Types of simple groups",
    "kind": "enum",
    "members": [
      {
        "name": "Simple",
        "docs": "No proper normal subgroups",
        "type_info": null
      },
      {
        "name": "NonSimple",
        "docs": "Not simple",
        "type_info": null
      },
      {
        "name": "QuasiSimple",
        "docs": "Quasi-simple",
        "type_info": null
      }
    ]
  },
  {
    "name": "SolvablePropertyVariant",
    "docs": "Types of solvable groups",
    "kind": "enum",
    "members": [
      {
        "name": "Solvable",
        "docs": "Has solvable series",
        "type_info": null
      },
      {
        "name": "NonSolvable",
        "docs": "Not solvable",
        "type_info": null
      },
      {
        "name": "Polysolvable",
        "docs": "Polysolvable",
        "type_info": null
      }
    ]
  },
  {
    "name": "NilpotentPropertyVariant",
    "docs": "Types of nilpotent groups",
    "kind": "enum",
    "members": [
      {
        "name": "Nilpotent",
        "docs": "Has nilpotent series",
        "type_info": "u32"
      },
      {
        "name": "NonNilpotent",
        "docs": "Not nilpotent",
        "type_info": null
      }
    ]
  },
  {
    "name": "CompactPropertyVariant",
    "docs": "Types of compact groups",
    "kind": "enum",
    "members": [
      {
        "name": "Compact",
        "docs": "Compact",
        "type_info": null
      },
      {
        "name": "NonCompact",
        "docs": "Non-compact",
        "type_info": null
      },
      {
        "name": "LocallyCompact",
        "docs": "Locally compact",
        "type_info": null
      }
    ]
  },
  {
    "name": "ConnectedPropertyVariant",
    "docs": "Types of connected groups",
    "kind": "enum",
    "members": [
      {
        "name": "Connected",
        "docs": "Connected",
        "type_info": null
      },
      {
        "name": "SimplyConnected",
        "docs": "Simply connected (stronger than just connected)",
        "type_info": null
      },
      {
        "name": "TotallyDisconnected",
        "docs": "Totally disconnected",
        "type_info": null
      },
      {
        "name": "LocallyConnected",
        "docs": "Locally connected",
        "type_info": null
      },
      {
        "name": "LocallySimplyConnected",
        "docs": "Locally simply connected",
        "type_info": null
      }
    ]
  },
  {
    "name": "MetrizablePropertyVariant",
    "docs": "Types of metrizable groups",
    "kind": "enum",
    "members": [
      {
        "name": "Metrizable",
        "docs": "Admits compatible metric",
        "type_info": null
      },
      {
        "name": "NonMetrizable",
        "docs": "Not metrizable",
        "type_info": null
      }
    ]
  },
  {
    "name": "SemisimplePropertyVariant",
    "docs": "Types of semisimple Lie groups",
    "kind": "enum",
    "members": [
      {
        "name": "Semisimple",
        "docs": "No abelian ideals",
        "type_info": null
      },
      {
        "name": "NonSemisimple",
        "docs": "Not semisimple",
        "type_info": null
      },
      {
        "name": "Split",
        "docs": "Split semisimple",
        "type_info": null
      }
    ]
  },
  {
    "name": "ReductivePropertyVariant",
    "docs": "Types of reductive Lie groups",
    "kind": "enum",
    "members": [
      {
        "name": "Reductive",
        "docs": "Reductive",
        "type_info": null
      },
      {
        "name": "NonReductive",
        "docs": "Not reductive",
        "type_info": null
      }
    ]
  },
  {
    "name": "GroupAction",
    "docs": "A group action of G on X is a homomorphism:\nφ: G → Aut(X)\nThis combines both the action definition and target information",
    "kind": "enum",
    "members": [
      {
        "name": "SetAction",
        "docs": "Properties of the action",
        "type_info": "{\n        group: Group,\n        space: Set,\n        point: Option<Box<GroupExpression>>,\n        properties: VariantSet<GroupActionProperty>,\n    }"
      },
      {
        "name": "VectorSpaceAction",
        "docs": "Properties of the action",
        "type_info": "{\n        group: Group,\n        space: String,\n        vector: Option<Vec<f64>>,\n        properties: VariantSet<GroupActionProperty>,\n    }"
      },
      {
        "name": "TopologicalSpaceAction",
        "docs": "Properties of the action",
        "type_info": "{\n        group: Group,\n        space: String,\n        point: Option<String>,\n        properties: VariantSet<GroupActionProperty>,\n    }"
      }
    ]
  },
  {
    "name": "GroupActionProperty",
    "docs": "Properties specific to group actions",
    "kind": "enum",
    "members": [
      {
        "name": "Transitive",
        "docs": "Transitive: Single orbit",
        "type_info": "TransitivityPropertyVariant"
      },
      {
        "name": "Free",
        "docs": "Free: Stabilizers are trivial",
        "type_info": "FreenessPropertyVariant"
      },
      {
        "name": "Proper",
        "docs": "Proper: Preimages of compacts are compact",
        "type_info": "PropernessPropertyVariant"
      },
      {
        "name": "Faithful",
        "docs": "Faithful: Kernel is trivial",
        "type_info": "FaithfulnessPropertyVariant"
      }
    ]
  },
  {
    "name": "TransitivityPropertyVariant",
    "docs": "Properties for transitivity of group actions",
    "kind": "enum",
    "members": [
      {
        "name": "Transitive",
        "docs": "Single orbit",
        "type_info": null
      },
      {
        "name": "FinitelyTransitive",
        "docs": "Finitely many orbits",
        "type_info": null
      },
      {
        "name": "NonTransitive",
        "docs": "Infinitely many orbits",
        "type_info": null
      }
    ]
  },
  {
    "name": "PropernessPropertyVariant",
    "docs": "Properties for properness of group actions",
    "kind": "enum",
    "members": [
      {
        "name": "Proper",
        "docs": "Proper action",
        "type_info": null
      },
      {
        "name": "NonProper",
        "docs": "Non-proper",
        "type_info": null
      },
      {
        "name": "LocallyProper",
        "docs": "Locally proper",
        "type_info": null
      }
    ]
  },
  {
    "name": "FaithfulnessPropertyVariant",
    "docs": "Properties for faithfulness of group actions",
    "kind": "enum",
    "members": [
      {
        "name": "Faithful",
        "docs": "Trivial kernel",
        "type_info": null
      },
      {
        "name": "NonFaithful",
        "docs": "Non-faithful",
        "type_info": null
      },
      {
        "name": "LocallyFaithful",
        "docs": "Locally faithful (finite kernel)",
        "type_info": null
      }
    ]
  },
  {
    "name": "FreenessPropertyVariant",
    "docs": "Properties for freeness of group actions",
    "kind": "enum",
    "members": [
      {
        "name": "Free",
        "docs": "Trivial stabilizers",
        "type_info": null
      },
      {
        "name": "NonFree",
        "docs": "Non-free",
        "type_info": null
      },
      {
        "name": "LocallyFree",
        "docs": "Locally free (finite stabilizers)",
        "type_info": null
      }
    ]
  },
  {
    "name": "GroupRelation",
    "docs": "Relations specific to group theory\nthese are the verbs in the language of group theory",
    "kind": "enum",
    "members": [
      {
        "name": "IsSubgroupOf",
        "docs": "One group is a subgroup of another",
        "type_info": "{\n        subgroup: Parametrizable<Group>,\n        group: Parametrizable<Group>,\n    }"
      },
      {
        "name": "IsNormalSubgroupOf",
        "docs": "One group is a normal subgroup of another",
        "type_info": "{\n        subgroup: Parametrizable<Group>,\n        group: Parametrizable<Group>,\n    }"
      },
      {
        "name": "IsIsomorphicTo",
        "docs": "Two groups are isomorphic",
        "type_info": "{\n        first: Parametrizable<Group>,\n        second: Parametrizable<Group>,\n    }"
      },
      {
        "name": "IsQuotientOf",
        "docs": "One group is a quotient of another",
        "type_info": "{\n        quotient: Parametrizable<Group>,\n        group: Parametrizable<Group>,\n        normal_subgroup: Parametrizable<Group>,\n    }"
      },
      {
        "name": "IsInCenterOf",
        "docs": "Element is in the center of a group",
        "type_info": "{\n        element: Parametrizable<GroupExpression>,\n        group: Parametrizable<Group>,\n    }"
      },
      {
        "name": "AreConjugateIn",
        "docs": "Two elements are conjugate in a group",
        "type_info": "{\n        element1: Parametrizable<GroupElement>,\n        element2: Parametrizable<GroupElement>,\n        group: Parametrizable<Group>,\n    }"
      },
      {
        "name": "HasOrderInGroup",
        "docs": "An element has a specified order in a group",
        "type_info": "{\n        element: Parametrizable<GroupExpression>,\n        group: Parametrizable<Group>,\n        order: Parametrizable<usize>,\n    }"
      },
      {
        "name": "HasIndexInGroup",
        "docs": "A subgroup is of a specific index in a group",
        "type_info": "{\n        subgroup: Parametrizable<Group>,\n        group: Parametrizable<Group>,\n        index: Parametrizable<usize>,\n    }"
      },
      {
        "name": "HasOrder",
        "docs": "A group has a specific number of elements",
        "type_info": "{\n        group: Parametrizable<Group>,\n        order: Parametrizable<usize>,\n    }"
      },
      {
        "name": "IsCyclicWithGenerator",
        "docs": "A group is cyclic with a specific generator",
        "type_info": "{\n        group: Parametrizable<Group>,\n        generator: Parametrizable<GroupExpression>,\n    }"
      },
      {
        "name": "NormalizesSubgroup",
        "docs": "An element normalizes a subgroup",
        "type_info": "{\n        element: Parametrizable<GroupExpression>,\n        subgroup: Parametrizable<Group>,\n        group: Parametrizable<Group>,\n    }"
      },
      {
        "name": "CentralizesSubgroup",
        "docs": "An element centralizes a subgroup",
        "type_info": "{\n        element: Parametrizable<GroupExpression>,\n        subgroup: Parametrizable<Group>,\n        group: Parametrizable<Group>,\n    }"
      },
      {
        "name": "IsCharacteristicSubgroupOf",
        "docs": "A subgroup is characteristic",
        "type_info": "{\n        subgroup: Parametrizable<Group>,\n        group: Parametrizable<Group>,\n    }"
      },
      {
        "name": "OrderDivides",
        "docs": "The order of one group divides the order of another",
        "type_info": "{\n        group1: Parametrizable<Group>,\n        group2: Parametrizable<Group>,\n    }"
      },
      {
        "name": "HasUniqueInverse",
        "docs": "An element has a unique inverse in a group",
        "type_info": "{\n        element: Parametrizable<GroupExpression>,\n        group: Parametrizable<Group>,\n    }"
      },
      {
        "name": "SylowSubgroupProperties",
        "docs": "Sylow p-subgroup properties",
        "type_info": "{\n        prime: Parametrizable<GroupExpression>, // Assuming prime expression can be variable\n        group: Parametrizable<Group>,\n    }"
      },
      {
        "name": "IsInverseOf",
        "docs": "One element is the inverse of another",
        "type_info": "{\n        element: Parametrizable<GroupExpression>,\n        inverse: Parametrizable<GroupExpression>,\n        group: Parametrizable<Group>,\n    }"
      },
      {
        "name": "IsHomomorphism",
        "docs": "A homomorphism between groups",
        "type_info": "{\n        homomorphism: Parametrizable<GroupExpression>,\n        domain: Parametrizable<Group>,\n        codomain: Parametrizable<Group>,\n    }"
      },
      {
        "name": "IsomorphicEmbedding",
        "docs": "An isomorphic embedding of one group into another",
        "type_info": "{\n        source: Parametrizable<Group>,\n        target: Parametrizable<Group>,\n    }"
      },
      {
        "name": "HasBasicProperty",
        "docs": "Asserts a basic group property on a Group.",
        "type_info": "{\n        target: Parametrizable<Group>,\n        property: GroupProperty,\n    }"
      },
      {
        "name": "HasTopologicalProperty",
        "docs": "",
        "type_info": "{\n        target: Parametrizable<TopologicalGroup>,\n        property: TopologicalGroupProperty,\n    }"
      },
      {
        "name": "HasLieProperty",
        "docs": "",
        "type_info": "{\n        target: Parametrizable<LieGroup>,\n        property: LieGroupProperty,\n    }"
      },
      {
        "name": "HasActionProperty",
        "docs": "Asserts a property on a Group Action.",
        "type_info": "{\n        target: Parametrizable<GroupAction>,\n        property: GroupActionProperty,\n    }"
      },
      {
        "name": "HasProductProperty",
        "docs": "Asserts a property on a Product Group.",
        "type_info": "{\n        target: Parametrizable<ProductGroup>,\n        property: ProductProperty,\n    }"
      },
      {
        "name": "HasModularAdditiveProperty",
        "docs": "Asserts a property on a Modular Additive Group.",
        "type_info": "{\n        target: Parametrizable<ModularAdditiveGroup>,\n        property: ModularProperty,\n    }"
      },
      {
        "name": "HasModularMultiplicativeProperty",
        "docs": "Asserts a property on a Modular Multiplicative Group.",
        "type_info": "{\n        target: Parametrizable<ModularMultiplicativeGroup>,\n        property: ModularProperty,\n    }"
      },
      {
        "name": "HasGeneralLinearMatrixProperty",
        "docs": "Asserts a Matrix property on a General Linear Group.",
        "type_info": "{\n        target: Parametrizable<GeneralLinearGroup>,\n        property: MatrixProperty,\n    }"
      },
      {
        "name": "HasGeneralLinearLinearProperty",
        "docs": "Asserts a Linear property on a General Linear Group.",
        "type_info": "{\n        target: Parametrizable<GeneralLinearGroup>,\n        property: LinearProperty,\n    }"
      },
      {
        "name": "HasSpecialLinearProperty",
        "docs": "Asserts a property on a Special Linear Group.",
        "type_info": "{\n        target: Parametrizable<SpecialLinearGroup>,\n        property: SpecialLinearProperty,\n    }"
      },
      {
        "name": "HasOrthogonalMatrixProperty",
        "docs": "Asserts a Matrix property on an Orthogonal Group.",
        "type_info": "{\n        target: Parametrizable<OrthogonalGroup>,\n        property: MatrixProperty,\n    }"
      },
      {
        "name": "HasSpecialOrthogonalProperty",
        "docs": "Asserts a property on a Special Orthogonal Group.",
        "type_info": "{\n        target: Parametrizable<SpecialOrthogonalGroup>,\n        property: SpecialOrthogonalProperty,\n    }"
      },
      {
        "name": "HasUnitaryMatrixProperty",
        "docs": "Asserts a Matrix property on a Unitary Group.",
        "type_info": "{\n        target: Parametrizable<UnitaryGroup>,\n        property: MatrixProperty,\n    }"
      },
      {
        "name": "HasSpecialUnitaryProperty",
        "docs": "Asserts a property on a Special Unitary Group.",
        "type_info": "{\n        target: Parametrizable<SpecialUnitaryGroup>,\n        property: SpecialUnitaryProperty,\n    }"
      },
      {
        "name": "HasAlternatingPermutationProperty",
        "docs": "Asserts a Permutation property on an Alternating Group.",
        "type_info": "{\n        target: Parametrizable<AlternatingGroup>,\n        property: PermutationProperty,\n    }"
      },
      {
        "name": "HasFreeProperty",
        "docs": "Asserts a property on a Free Group.",
        "type_info": "{\n        target: Parametrizable<FreeGroup>,\n        property: FreeProperty,\n    }"
      },
      {
        "name": "HasQuotientProperty",
        "docs": "Asserts a property on a Quotient Group.",
        "type_info": "{\n        target: Parametrizable<QuotientGroup>,\n        property: QuotientProperty,\n    }"
      },
      {
        "name": "HasOperationProperty",
        "docs": "Asserts a property on a Group Operation.",
        "type_info": "{\n        target: Parametrizable<GroupOperation>,\n        property: GroupOperationProperty,\n    }"
      }
    ]
  },
  {
    "name": "GroupExpression",
    "docs": "",
    "kind": "enum",
    "members": [
      {
        "name": "Element",
        "docs": "A concrete element in a group",
        "type_info": "{\n        group: Parametrizable<Group>,          // Group can be variable\n        element: Parametrizable<GroupElement>, // Element can be variable\n    }"
      },
      {
        "name": "Identity(Parametrizable<Group>), // Group can be variable\n    Operation",
        "docs": "A group operation between two element expressions",
        "type_info": "{\n        group: Parametrizable<Group>, // Group can be variable\n        left: Box<Parametrizable<GroupExpression>>,\n        right: Box<Parametrizable<GroupExpression>>,\n    }"
      },
      {
        "name": "Inverse",
        "docs": "The inverse of an expression",
        "type_info": "{\n        group: Parametrizable<Group>, // Group can be variable\n        element: Box<Parametrizable<GroupExpression>>,\n    }"
      },
      {
        "name": "Commutator",
        "docs": "A commutator of two elements",
        "type_info": "{\n        group: Parametrizable<Group>, // Group can be variable\n        a: Box<Parametrizable<GroupExpression>>,\n        b: Box<Parametrizable<GroupExpression>>,\n    }"
      },
      {
        "name": "Coset",
        "docs": "A coset of a subgroup",
        "type_info": "{\n        group: Parametrizable<Group>, // Group can be variable\n        element: Box<Parametrizable<GroupExpression>>,\n        subgroup: Parametrizable<Group>, // Subgroup can be variable\n        is_left: bool,\n    }"
      },
      {
        "name": "ActionOnElement",
        "docs": "A group action applied to an element",
        "type_info": "{\n        action: Parametrizable<GroupAction>, // Action can be variable\n        element: Box<Parametrizable<GroupExpression>>,\n    }"
      },
      {
        "name": "Power",
        "docs": "Represents a power (exponentiation) of an element",
        "type_info": "{\n        group: Parametrizable<Group>, // Group can be variable\n        base: Box<Parametrizable<GroupExpression>>,\n        exponent: Parametrizable<i32>, // Exponent can be variable\n    }"
      },
      {
        "name": "GroupOrder",
        "docs": "The order of a group: |G|",
        "type_info": "{\n        group: Parametrizable<Group>, // Group can be variable\n    }"
      },
      {
        "name": "ElementOrder",
        "docs": "The order of an element: |g|",
        "type_info": "{\n        element: Box<Parametrizable<GroupExpression>>,\n        group: Parametrizable<Group>, // Group can be variable\n    }"
      },
      {
        "name": "Homomorphism",
        "docs": "A homomorphism between groups: φ : G → H",
        "type_info": "(Parametrizable<GroupHomomorphism>), // Homomorphism itself can be variable"
      }
    ]
  },
  {
    "name": "GroupHomomorphism",
    "docs": "",
    "kind": "struct",
    "members": [
      {
        "name": "domain",
        "type": "Parametrizable<Group>",
        "docs": "The domain group"
      },
      {
        "name": "codomain",
        "type": "Parametrizable<Group>",
        "docs": "The codomain group"
      }
    ]
  },
  {
    "name": "GroupElement",
    "docs": "Different types of element values depending on the group structure",
    "kind": "enum",
    "members": [
      {
        "name": "Integer",
        "docs": "A numeric element (useful for Z/nZ, etc.)",
        "type_info": "i64"
      },
      {
        "name": "Permutation",
        "docs": "A permutation (for symmetric groups)",
        "type_info": "Vec<usize>"
      },
      {
        "name": "Matrix",
        "docs": "A matrix (for matrix groups)",
        "type_info": "Vec<Vec<i64>>"
      },
      {
        "name": "Symbol",
        "docs": "A symbolic element (for abstract elements)",
        "type_info": "String"
      }
    ]
  },
  {
    "name": "GroupExpressionError",
    "docs": "Error type for group expression evaluation",
    "kind": "enum",
    "members": [
      {
        "name": "InvalidElement",
        "docs": "Element is not in the group",
        "type_info": "String"
      },
      {
        "name": "InvalidOperation",
        "docs": "Operation not defined for these elements",
        "type_info": "String"
      },
      {
        "name": "Other",
        "docs": "Other errors",
        "type_info": "String"
      }
    ]
  },
  {
    "name": "GroupError",
    "docs": "",
    "kind": "enum",
    "members": [
      {
        "name": "InvalidElement",
        "docs": "",
        "type_info": "String"
      },
      {
        "name": "InvalidOperation",
        "docs": "",
        "type_info": "String"
      },
      {
        "name": "Other",
        "docs": "",
        "type_info": "String"
      }
    ]
  },
  {
    "name": "TopologicalGroup",
    "docs": "A group with topological structure",
    "kind": "struct",
    "members": [
      {
        "name": "core",
        "type": "GenericGroup",
        "docs": "The core algebraic group structure"
      },
      {
        "name": "topology",
        "type": "TopologicalSpace",
        "docs": "The topology on the group"
      },
      {
        "name": "props",
        "type": "VariantSet<TopologicalGroupProperty>",
        "docs": "Properties specific to the topological structure"
      }
    ]
  },
  {
    "name": "LieGroup",
    "docs": "A Lie group with smooth structure",
    "kind": "struct",
    "members": [
      {
        "name": "core",
        "type": "GenericGroup",
        "docs": "The core algebraic group structure"
      },
      {
        "name": "topology",
        "type": "TopologicalSpace",
        "docs": "The topology on the group"
      },
      {
        "name": "charts",
        "type": "Vec<String>, // Simplified; would be a real Charts type in production",
        "docs": "Smooth manifold structure (represented with charts)"
      },
      {
        "name": "props",
        "type": "VariantSet<LieGroupProperty>",
        "docs": "Properties specific to the Lie structure"
      }
    ]
  },
  {
    "name": "CyclicGroup",
    "docs": "A cyclic group generated by a single element",
    "kind": "struct",
    "members": [
      {
        "name": "core",
        "type": "GenericGroup",
        "docs": "The core algebraic group structure"
      },
      {
        "name": "generator",
        "type": "GroupElement",
        "docs": "The generator element"
      },
      {
        "name": "order",
        "type": "Option<usize>, // None means infinite",
        "docs": "The order of the group (can be infinite)"
      }
    ]
  },
  {
    "name": "SymmetricGroup",
    "docs": "A symmetric group (permutation group) on n elements",
    "kind": "struct",
    "members": [
      {
        "name": "core",
        "type": "GenericGroup",
        "docs": "The core algebraic group structure"
      },
      {
        "name": "degree",
        "type": "usize",
        "docs": "The number of elements being permuted"
      }
    ]
  },
  {
    "name": "DihedralGroup",
    "docs": "A dihedral group representing the symmetries of a regular polygon",
    "kind": "struct",
    "members": [
      {
        "name": "core",
        "type": "GenericGroup",
        "docs": "The core algebraic group structure"
      },
      {
        "name": "order",
        "type": "usize",
        "docs": "The order of the group (twice the number of sides of the polygon)"
      }
    ]
  },
  {
    "name": "MatrixProperty",
    "docs": "Properties specific to matrix groups",
    "kind": "enum",
    "members": [
      {
        "name": "Determinant",
        "docs": "Determinant property",
        "type_info": "DeterminantPropertyVariant"
      },
      {
        "name": "InnerProductPreservation",
        "docs": "Inner product preservation property",
        "type_info": "InnerProductPreservationVariant"
      },
      {
        "name": "OrientationPreservation",
        "docs": "Orientation preservation property",
        "type_info": "OrientationPreservationVariant"
      },
      {
        "name": "HermitianFormPreservation",
        "docs": "Hermitian form preservation property",
        "type_info": "HermitianFormPreservationVariant"
      },
      {
        "name": "Dimension",
        "docs": "Dimension property",
        "type_info": "u32"
      }
    ]
  },
  {
    "name": "DeterminantPropertyVariant",
    "docs": "Property variants for determinant property",
    "kind": "enum",
    "members": [
      {
        "name": "AlwaysOne",
        "docs": "Determinant is always one",
        "type_info": null
      },
      {
        "name": "NonZero",
        "docs": "Determinant is non-zero",
        "type_info": null
      },
      {
        "name": "SpecificValue",
        "docs": "Determinant has a specific value",
        "type_info": "String"
      }
    ]
  },
  {
    "name": "InnerProductPreservationVariant",
    "docs": "Property variants for inner product preservation",
    "kind": "enum",
    "members": [
      {
        "name": "Preserves",
        "docs": "Preserves inner product",
        "type_info": null
      },
      {
        "name": "Scales",
        "docs": "Scales inner product",
        "type_info": null
      },
      {
        "name": "DoesNotPreserve",
        "docs": "Does not preserve inner product",
        "type_info": null
      }
    ]
  },
  {
    "name": "OrientationPreservationVariant",
    "docs": "Property variants for orientation preservation",
    "kind": "enum",
    "members": [
      {
        "name": "Preserves",
        "docs": "Preserves orientation",
        "type_info": null
      },
      {
        "name": "Reverses",
        "docs": "Reverses orientation",
        "type_info": null
      },
      {
        "name": "Mixed",
        "docs": "May preserve or reverse (mixed)",
        "type_info": null
      }
    ]
  },
  {
    "name": "HermitianFormPreservationVariant",
    "docs": "Property variants for Hermitian form preservation",
    "kind": "enum",
    "members": [
      {
        "name": "Preserves",
        "docs": "Preserves Hermitian form",
        "type_info": null
      },
      {
        "name": "DoesNotPreserve",
        "docs": "Does not preserve Hermitian form",
        "type_info": null
      }
    ]
  },
  {
    "name": "LinearProperty",
    "docs": "Properties specific to linear groups",
    "kind": "enum",
    "members": [
      {
        "name": "VolumePreservation",
        "docs": "Volume preservation property",
        "type_info": "VolumePreservationVariant"
      },
      {
        "name": "Unimodularity",
        "docs": "Unimodularity property",
        "type_info": "UnimodularityVariant"
      }
    ]
  },
  {
    "name": "VolumePreservationVariant",
    "docs": "Property variants for volume preservation",
    "kind": "enum",
    "members": [
      {
        "name": "Preserves",
        "docs": "Preserves volume",
        "type_info": null
      },
      {
        "name": "Scales",
        "docs": "Scales volume",
        "type_info": null
      },
      {
        "name": "DoesNotPreserve",
        "docs": "Does not preserve volume",
        "type_info": null
      }
    ]
  },
  {
    "name": "UnimodularityVariant",
    "docs": "Property variants for unimodularity",
    "kind": "enum",
    "members": [
      {
        "name": "Unimodular",
        "docs": "Is unimodular",
        "type_info": null
      },
      {
        "name": "NonUnimodular",
        "docs": "Is not unimodular",
        "type_info": null
      }
    ]
  },
  {
    "name": "ModularProperty",
    "docs": "Properties specific to modular groups",
    "kind": "enum",
    "members": [
      {
        "name": "Representatives",
        "docs": "Representatives style property",
        "type_info": "RepresentativesVariant"
      },
      {
        "name": "Modulus",
        "docs": "The modulus value",
        "type_info": "u32"
      },
      {
        "name": "FullMultiplicative",
        "docs": "Full multiplicative group property",
        "type_info": "FullMultiplicativeVariant"
      },
      {
        "name": "CoprimeToModulus",
        "docs": "Coprime to modulus property",
        "type_info": "CoprimeToModulusVariant"
      }
    ]
  },
  {
    "name": "RepresentativesVariant",
    "docs": "Property variants for representatives",
    "kind": "enum",
    "members": [
      {
        "name": "Standard",
        "docs": "Uses standard representatives",
        "type_info": null
      },
      {
        "name": "Canonical",
        "docs": "Uses canonical representatives",
        "type_info": null
      },
      {
        "name": "Minimal",
        "docs": "Uses minimal representatives",
        "type_info": null
      }
    ]
  },
  {
    "name": "FullMultiplicativeVariant",
    "docs": "Property variants for full multiplicative status",
    "kind": "enum",
    "members": [
      {
        "name": "Full",
        "docs": "Is the full multiplicative group",
        "type_info": null
      },
      {
        "name": "Subgroup",
        "docs": "Is a subgroup of the full multiplicative group",
        "type_info": null
      }
    ]
  },
  {
    "name": "CoprimeToModulusVariant",
    "docs": "Property variants for coprime to modulus",
    "kind": "enum",
    "members": [
      {
        "name": "All",
        "docs": "All elements are coprime to modulus",
        "type_info": null
      },
      {
        "name": "Some",
        "docs": "Some elements are coprime to modulus",
        "type_info": null
      },
      {
        "name": "None",
        "docs": "No elements are coprime to modulus",
        "type_info": null
      }
    ]
  },
  {
    "name": "ProductProperty",
    "docs": "Properties specific to product groups",
    "kind": "enum",
    "members": [
      {
        "name": "Projections",
        "docs": "Projection maps property",
        "type_info": "ProjectionsVariant"
      },
      {
        "name": "Embeddings",
        "docs": "Embeddings property",
        "type_info": "EmbeddingsVariant"
      },
      {
        "name": "ProductType",
        "docs": "Product type property",
        "type_info": "ProductTypeVariant"
      },
      {
        "name": "Action",
        "docs": "Action property (for semidirect products)",
        "type_info": "ActionVariant"
      }
    ]
  },
  {
    "name": "ProjectionsVariant",
    "docs": "Property variants for projections",
    "kind": "enum",
    "members": [
      {
        "name": "HasProjections",
        "docs": "Has projection maps",
        "type_info": null
      },
      {
        "name": "HasNoProjections",
        "docs": "Has no projection maps",
        "type_info": null
      }
    ]
  },
  {
    "name": "EmbeddingsVariant",
    "docs": "Property variants for embeddings",
    "kind": "enum",
    "members": [
      {
        "name": "HasCanonical",
        "docs": "Has canonical embeddings",
        "type_info": null
      },
      {
        "name": "HasNonCanonical",
        "docs": "Has non-canonical embeddings",
        "type_info": null
      },
      {
        "name": "HasNoEmbeddings",
        "docs": "Has no embeddings",
        "type_info": null
      }
    ]
  },
  {
    "name": "ProductTypeVariant",
    "docs": "Property variants for product type",
    "kind": "enum",
    "members": [
      {
        "name": "Direct",
        "docs": "Is a direct product",
        "type_info": null
      },
      {
        "name": "Semidirect",
        "docs": "Is a semidirect product",
        "type_info": null
      },
      {
        "name": "Free",
        "docs": "Is a free product",
        "type_info": null
      },
      {
        "name": "Fibered",
        "docs": "Is a fibered product",
        "type_info": null
      }
    ]
  },
  {
    "name": "ActionVariant",
    "docs": "Property variants for action",
    "kind": "enum",
    "members": [
      {
        "name": "Trivial",
        "docs": "Has trivial action",
        "type_info": null
      },
      {
        "name": "NonTrivial",
        "docs": "Has non-trivial action",
        "type_info": null
      },
      {
        "name": "Faithful",
        "docs": "Has faithful action",
        "type_info": null
      }
    ]
  },
  {
    "name": "FreeProperty",
    "docs": "Properties specific to free groups",
    "kind": "enum",
    "members": [
      {
        "name": "Rank",
        "docs": "Rank property (number of generators)",
        "type_info": "u32"
      },
      {
        "name": "Generation",
        "docs": "Generation property",
        "type_info": "GenerationVariant"
      },
      {
        "name": "Generators",
        "docs": "Generators property",
        "type_info": "GeneratorsVariant"
      }
    ]
  },
  {
    "name": "GenerationVariant",
    "docs": "Property variants for generation",
    "kind": "enum",
    "members": [
      {
        "name": "Freely",
        "docs": "Is freely generated",
        "type_info": null
      },
      {
        "name": "NonFreely",
        "docs": "Is not freely generated",
        "type_info": null
      }
    ]
  },
  {
    "name": "GeneratorsVariant",
    "docs": "Property variants for generators",
    "kind": "enum",
    "members": [
      {
        "name": "Standard",
        "docs": "Has standard generators",
        "type_info": null
      },
      {
        "name": "NonStandard",
        "docs": "Has non-standard generators",
        "type_info": null
      }
    ]
  },
  {
    "name": "PermutationProperty",
    "docs": "Properties specific to permutation groups",
    "kind": "enum",
    "members": [
      {
        "name": "Parity",
        "docs": "Parity property",
        "type_info": "ParityVariant"
      },
      {
        "name": "Degree",
        "docs": "Degree property (size of the set being permuted)",
        "type_info": "u32"
      },
      {
        "name": "Symmetric",
        "docs": "Symmetric property",
        "type_info": "SymmetricVariant"
      },
      {
        "name": "Primitivity",
        "docs": "Primitivity property",
        "type_info": "PrimitivityVariant"
      }
    ]
  },
  {
    "name": "ParityVariant",
    "docs": "Property variants for parity",
    "kind": "enum",
    "members": [
      {
        "name": "Even",
        "docs": "Contains only even permutations",
        "type_info": null
      },
      {
        "name": "Odd",
        "docs": "Contains only odd permutations",
        "type_info": null
      },
      {
        "name": "Mixed",
        "docs": "Contains both even and odd permutations",
        "type_info": null
      }
    ]
  },
  {
    "name": "SymmetricVariant",
    "docs": "Property variants for symmetric status",
    "kind": "enum",
    "members": [
      {
        "name": "Full",
        "docs": "Is the full symmetric group",
        "type_info": null
      },
      {
        "name": "ProperSubgroup",
        "docs": "Is a proper subgroup of the symmetric group",
        "type_info": null
      }
    ]
  },
  {
    "name": "PrimitivityVariant",
    "docs": "Property variants for primitivity",
    "kind": "enum",
    "members": [
      {
        "name": "Primitive",
        "docs": "Is primitive",
        "type_info": null
      },
      {
        "name": "Imprimitive",
        "docs": "Is imprimitive",
        "type_info": null
      }
    ]
  },
  {
    "name": "QuotientProperty",
    "docs": "Properties specific to quotient groups",
    "kind": "enum",
    "members": [
      {
        "name": "Projection",
        "docs": "Projection property",
        "type_info": "ProjectionVariant"
      },
      {
        "name": "Simplicity",
        "docs": "Simplicity property",
        "type_info": "SimplicityVariant"
      }
    ]
  },
  {
    "name": "ProjectionVariant",
    "docs": "Property variants for projection",
    "kind": "enum",
    "members": [
      {
        "name": "HasProjection",
        "docs": "Has projection homomorphism",
        "type_info": null
      },
      {
        "name": "HasNoProjection",
        "docs": "Has no projection homomorphism",
        "type_info": null
      }
    ]
  },
  {
    "name": "SimplicityVariant",
    "docs": "Property variants for simplicity",
    "kind": "enum",
    "members": [
      {
        "name": "Simple",
        "docs": "Is a simple group",
        "type_info": null
      },
      {
        "name": "NonSimple",
        "docs": "Is not a simple group",
        "type_info": null
      }
    ]
  },
  {
    "name": "SpecialLinearProperty",
    "docs": "Properties specific to special linear groups (SL)",
    "kind": "enum",
    "members": [
      {
        "name": "Determinant",
        "docs": "Determinant property",
        "type_info": "SpecialLinearDeterminantVariant"
      },
      {
        "name": "VolumePreservation",
        "docs": "Volume preservation property",
        "type_info": "SpecialLinearVolumeVariant"
      },
      {
        "name": "Connectedness",
        "docs": "Connectedness property",
        "type_info": "SpecialLinearConnectednessVariant"
      },
      {
        "name": "CommutatorSubgroup",
        "docs": "Commutator subgroup property",
        "type_info": "SpecialLinearCommutatorVariant"
      }
    ]
  },
  {
    "name": "SpecialLinearDeterminantVariant",
    "docs": "Property variants for special linear determinant",
    "kind": "enum",
    "members": [
      {
        "name": "AlwaysOne",
        "docs": "Determinant is always 1",
        "type_info": null
      }
    ]
  },
  {
    "name": "SpecialLinearVolumeVariant",
    "docs": "Property variants for special linear volume preservation",
    "kind": "enum",
    "members": [
      {
        "name": "Preserves",
        "docs": "Preserves volume forms",
        "type_info": null
      }
    ]
  },
  {
    "name": "SpecialLinearConnectednessVariant",
    "docs": "Property variants for special linear connectedness",
    "kind": "enum",
    "members": [
      {
        "name": "Connected",
        "docs": "Is connected",
        "type_info": null
      },
      {
        "name": "Disconnected",
        "docs": "Is not connected",
        "type_info": null
      }
    ]
  },
  {
    "name": "SpecialLinearCommutatorVariant",
    "docs": "Property variants for special linear commutator subgroup",
    "kind": "enum",
    "members": [
      {
        "name": "IsCommutator",
        "docs": "Is the commutator subgroup of GL(n,F)",
        "type_info": null
      },
      {
        "name": "IsNotCommutator",
        "docs": "Is not the commutator subgroup of GL(n,F)",
        "type_info": null
      }
    ]
  },
  {
    "name": "SpecialOrthogonalProperty",
    "docs": "Properties specific to special orthogonal groups (SO)",
    "kind": "enum",
    "members": [
      {
        "name": "OrientationPreservation",
        "docs": "Orientation preservation property",
        "type_info": "SpecialOrthogonalOrientationVariant"
      },
      {
        "name": "SpinCover",
        "docs": "Spin cover property",
        "type_info": "SpecialOrthogonalSpinVariant"
      },
      {
        "name": "ConnectedComponent",
        "docs": "Connected component property",
        "type_info": "SpecialOrthogonalComponentVariant"
      },
      {
        "name": "Determinant",
        "docs": "Determinant property",
        "type_info": "SpecialOrthogonalDeterminantVariant"
      }
    ]
  },
  {
    "name": "SpecialOrthogonalOrientationVariant",
    "docs": "Property variants for special orthogonal orientation",
    "kind": "enum",
    "members": [
      {
        "name": "Preserves",
        "docs": "Preserves orientation",
        "type_info": null
      }
    ]
  },
  {
    "name": "SpecialOrthogonalSpinVariant",
    "docs": "Property variants for special orthogonal spin cover",
    "kind": "enum",
    "members": [
      {
        "name": "HasSpinCover",
        "docs": "Has a double cover (spin group)",
        "type_info": null
      },
      {
        "name": "NoSpinCover",
        "docs": "Has no spin cover",
        "type_info": null
      }
    ]
  },
  {
    "name": "SpecialOrthogonalComponentVariant",
    "docs": "Property variants for special orthogonal component",
    "kind": "enum",
    "members": [
      {
        "name": "IsConnectedComponent",
        "docs": "Is the connected component of O(n)",
        "type_info": null
      },
      {
        "name": "IsNotConnectedComponent",
        "docs": "Is not the connected component of O(n)",
        "type_info": null
      }
    ]
  },
  {
    "name": "SpecialOrthogonalDeterminantVariant",
    "docs": "Property variants for special orthogonal determinant",
    "kind": "enum",
    "members": [
      {
        "name": "AlwaysOne",
        "docs": "Determinant is always 1",
        "type_info": null
      }
    ]
  },
  {
    "name": "SpecialUnitaryProperty",
    "docs": "Properties specific to special unitary groups (SU)",
    "kind": "enum",
    "members": [
      {
        "name": "Determinant",
        "docs": "Determinant property",
        "type_info": "SpecialUnitaryDeterminantVariant"
      },
      {
        "name": "Compactness",
        "docs": "Compactness property",
        "type_info": "SpecialUnitaryCompactnessVariant"
      },
      {
        "name": "Connectedness",
        "docs": "Connectedness property",
        "type_info": "SpecialUnitaryConnectednessVariant"
      },
      {
        "name": "VolumePreservation",
        "docs": "Volume preservation property",
        "type_info": "SpecialUnitaryVolumeVariant"
      }
    ]
  },
  {
    "name": "SpecialUnitaryDeterminantVariant",
    "docs": "Property variants for special unitary determinant",
    "kind": "enum",
    "members": [
      {
        "name": "AlwaysOne",
        "docs": "Determinant is always 1",
        "type_info": null
      }
    ]
  },
  {
    "name": "SpecialUnitaryCompactnessVariant",
    "docs": "Property variants for special unitary compactness",
    "kind": "enum",
    "members": [
      {
        "name": "AlwaysCompact",
        "docs": "Always compact",
        "type_info": null
      }
    ]
  },
  {
    "name": "SpecialUnitaryConnectednessVariant",
    "docs": "Property variants for special unitary connectedness",
    "kind": "enum",
    "members": [
      {
        "name": "SimplyConnected",
        "docs": "Simply connected",
        "type_info": null
      },
      {
        "name": "NotSimplyConnected",
        "docs": "Not simply connected",
        "type_info": null
      }
    ]
  },
  {
    "name": "SpecialUnitaryVolumeVariant",
    "docs": "Property variants for special unitary volume preservation",
    "kind": "enum",
    "members": [
      {
        "name": "PreservesComplexVolume",
        "docs": "Preserves complex volume form",
        "type_info": null
      },
      {
        "name": "DoesNotPreserveComplexVolume",
        "docs": "Does not preserve complex volume form",
        "type_info": null
      }
    ]
  },
  {
    "name": "GeneralLinearGroup",
    "docs": "General linear group GL(n,F)",
    "kind": "struct",
    "members": [
      {
        "name": "core",
        "type": "GenericGroup",
        "docs": "The core algebraic group structure"
      },
      {
        "name": "dimension",
        "type": "u32",
        "docs": "The dimension"
      },
      {
        "name": "field",
        "type": "Field",
        "docs": "The field over which the group is defined"
      },
      {
        "name": "matrix_props",
        "type": "VariantSet<MatrixProperty>",
        "docs": "Matrix specific properties"
      },
      {
        "name": "linear_props",
        "type": "VariantSet<LinearProperty>",
        "docs": "Linear specific properties"
      }
    ]
  },
  {
    "name": "SpecialLinearGroup",
    "docs": "Special linear group SL(n,F)",
    "kind": "struct",
    "members": [
      {
        "name": "general_linear",
        "type": "GeneralLinearGroup",
        "docs": "The underlying general linear group"
      },
      {
        "name": "special_linear_props",
        "type": "VariantSet<SpecialLinearProperty>",
        "docs": "Properties specific to special linear groups"
      }
    ]
  },
  {
    "name": "OrthogonalGroup",
    "docs": "Orthogonal group O(n)",
    "kind": "struct",
    "members": [
      {
        "name": "core",
        "type": "GenericGroup",
        "docs": "The core algebraic group structure"
      },
      {
        "name": "dimension",
        "type": "u32",
        "docs": "The dimension"
      },
      {
        "name": "matrix_props",
        "type": "VariantSet<MatrixProperty>",
        "docs": "Matrix specific properties"
      }
    ]
  },
  {
    "name": "SpecialOrthogonalGroup",
    "docs": "Special orthogonal group SO(n)",
    "kind": "struct",
    "members": [
      {
        "name": "orthogonal",
        "type": "OrthogonalGroup",
        "docs": "The underlying orthogonal group"
      },
      {
        "name": "special_orthogonal_props",
        "type": "VariantSet<SpecialOrthogonalProperty>",
        "docs": "Properties specific to special orthogonal groups"
      }
    ]
  },
  {
    "name": "UnitaryGroup",
    "docs": "Unitary group U(n)",
    "kind": "struct",
    "members": [
      {
        "name": "core",
        "type": "GenericGroup",
        "docs": "The core algebraic group structure"
      },
      {
        "name": "dimension",
        "type": "u32",
        "docs": "The dimension"
      },
      {
        "name": "matrix_props",
        "type": "VariantSet<MatrixProperty>",
        "docs": "Matrix specific properties"
      }
    ]
  },
  {
    "name": "SpecialUnitaryGroup",
    "docs": "Special unitary group SU(n)",
    "kind": "struct",
    "members": [
      {
        "name": "unitary",
        "type": "UnitaryGroup",
        "docs": "The underlying unitary group"
      },
      {
        "name": "special_unitary_props",
        "type": "VariantSet<SpecialUnitaryProperty>",
        "docs": "Properties specific to special unitary groups"
      }
    ]
  },
  {
    "name": "AlternatingGroup",
    "docs": "Alternating group A_n",
    "kind": "struct",
    "members": [
      {
        "name": "core",
        "type": "GenericGroup",
        "docs": "The core algebraic group structure"
      },
      {
        "name": "degree",
        "type": "u32",
        "docs": "The degree (n in A_n)"
      },
      {
        "name": "perm_props",
        "type": "VariantSet<PermutationProperty>",
        "docs": "Permutation specific properties"
      }
    ]
  },
  {
    "name": "ModularAdditiveGroup",
    "docs": "Modular additive group Z/nZ",
    "kind": "struct",
    "members": [
      {
        "name": "core",
        "type": "GenericGroup",
        "docs": "The core algebraic group structure"
      },
      {
        "name": "modulus",
        "type": "u32",
        "docs": "The modulus"
      },
      {
        "name": "modular_props",
        "type": "VariantSet<ModularProperty>",
        "docs": "Modular specific properties"
      }
    ]
  },
  {
    "name": "ModularMultiplicativeGroup",
    "docs": "Multiplicative group of integers modulo n",
    "kind": "struct",
    "members": [
      {
        "name": "core",
        "type": "GenericGroup",
        "docs": "The core algebraic group structure"
      },
      {
        "name": "modulus",
        "type": "u32",
        "docs": "The modulus"
      },
      {
        "name": "modular_props",
        "type": "VariantSet<ModularProperty>",
        "docs": "Modular specific properties"
      }
    ]
  },
  {
    "name": "FreeGroup",
    "docs": "Free group F_n",
    "kind": "struct",
    "members": [
      {
        "name": "core",
        "type": "GenericGroup",
        "docs": "The core algebraic group structure"
      },
      {
        "name": "rank",
        "type": "u32",
        "docs": "The rank (number of generators)"
      },
      {
        "name": "free_props",
        "type": "VariantSet<FreeProperty>",
        "docs": "Free group specific properties"
      }
    ]
  },
  {
    "name": "QuotientGroup",
    "docs": "Quotient group G/N",
    "kind": "struct",
    "members": [
      {
        "name": "core",
        "type": "GenericGroup",
        "docs": "The core algebraic group structure"
      },
      {
        "name": "group",
        "type": "Box<Group>",
        "docs": "The group"
      },
      {
        "name": "normal_subgroup",
        "type": "Box<Group>",
        "docs": "The normal subgroup"
      },
      {
        "name": "quotient_props",
        "type": "VariantSet<QuotientProperty>",
        "docs": "Quotient specific properties"
      }
    ]
  },
  {
    "name": "TrivialGroup",
    "docs": "The trivial group",
    "kind": "struct",
    "members": [
      {
        "name": "core",
        "type": "GenericGroup",
        "docs": "The core algebraic group structure"
      }
    ]
  },
  {
    "name": "KernelGroup",
    "docs": "A group defined as the kernel of a homomorphism",
    "kind": "struct",
    "members": [
      {
        "name": "core",
        "type": "GenericGroup",
        "docs": ""
      },
      {
        "name": "defining_homomorphism",
        "type": "Box<GroupHomomorphism>",
        "docs": ""
      }
    ]
  },
  {
    "name": "ImageGroup",
    "docs": "A group defined as the image of a homomorphism",
    "kind": "struct",
    "members": [
      {
        "name": "core",
        "type": "GenericGroup",
        "docs": ""
      },
      {
        "name": "defining_homomorphism",
        "type": "Box<GroupHomomorphism>",
        "docs": ""
      }
    ]
  },
  {
    "name": "CenterGroup",
    "docs": "A group defined as the center of another group: Z(G)",
    "kind": "struct",
    "members": [
      {
        "name": "core",
        "type": "GenericGroup",
        "docs": ""
      },
      {
        "name": "parent_group",
        "type": "Box<Group>",
        "docs": ""
      }
    ]
  },
  {
    "name": "GeneratedSubgroup",
    "docs": "A group defined as a subgroup generated by a set of elements",
    "kind": "struct",
    "members": [
      {
        "name": "core",
        "type": "GenericGroup",
        "docs": ""
      },
      {
        "name": "parent_group",
        "type": "Box<Group>",
        "docs": ""
      },
      {
        "name": "generators",
        "type": "Vec<GroupElement>, // Or GroupExpression?",
        "docs": ""
      }
    ]
  },
  {
    "name": "NormalizerGroup",
    "docs": "A group defined as the normalizer of a subgroup: N_G(H)",
    "kind": "struct",
    "members": [
      {
        "name": "core",
        "type": "GenericGroup",
        "docs": ""
      },
      {
        "name": "parent_group",
        "type": "Box<Group>",
        "docs": ""
      },
      {
        "name": "subgroup_normalized",
        "type": "Box<Group>",
        "docs": ""
      }
    ]
  },
  {
    "name": "CentralizerGroup",
    "docs": "A group defined as the centralizer of an element: C_G(x)",
    "kind": "struct",
    "members": [
      {
        "name": "core",
        "type": "GenericGroup",
        "docs": ""
      },
      {
        "name": "parent_group",
        "type": "Box<Group>",
        "docs": ""
      },
      {
        "name": "element_centralized",
        "type": "GroupElement, // Or GroupExpression?",
        "docs": ""
      }
    ]
  },
  {
    "name": "CommutatorSubgroup",
    "docs": "A group defined as the commutator subgroup: [G,G]",
    "kind": "struct",
    "members": [
      {
        "name": "core",
        "type": "GenericGroup",
        "docs": ""
      },
      {
        "name": "parent_group",
        "type": "Box<Group>",
        "docs": ""
      }
    ]
  },
  {
    "name": "SylowSubgroup",
    "docs": "A group defined as a Sylow p-subgroup: Syl_p(G)",
    "kind": "struct",
    "members": [
      {
        "name": "core",
        "type": "GenericGroup",
        "docs": ""
      },
      {
        "name": "parent_group",
        "type": "Box<Group>",
        "docs": ""
      },
      {
        "name": "prime",
        "type": "u64, // Assuming prime is a number",
        "docs": ""
      }
    ]
  },
  {
    "name": "WreathProductGroup",
    "docs": "A group defined as a wreath product",
    "kind": "struct",
    "members": [
      {
        "name": "core",
        "type": "GenericGroup",
        "docs": ""
      },
      {
        "name": "base_group",
        "type": "Box<Group>",
        "docs": ""
      },
      {
        "name": "acting_group",
        "type": "Box<Group>",
        "docs": ""
      }
    ]
  },
  {
    "name": "CentralProductGroup",
    "docs": "A group defined as a central product",
    "kind": "struct",
    "members": [
      {
        "name": "core",
        "type": "GenericGroup",
        "docs": ""
      },
      {
        "name": "component_groups",
        "type": "Vec<Box<Group>>",
        "docs": ""
      },
      {
        "name": "center_identification_map",
        "type": "String, // Details on how centers are identified",
        "docs": ""
      }
    ]
  },
  {
    "name": "PullbackGroup",
    "docs": "A group defined as a pullback (fibered product)",
    "kind": "struct",
    "members": [
      {
        "name": "core",
        "type": "GenericGroup",
        "docs": ""
      },
      {
        "name": "source_groups",
        "type": "Vec<Box<Group>>, // Groups being mapped from",
        "docs": ""
      },
      {
        "name": "target_group",
        "type": "Box<Group>,       // Group being mapped to",
        "docs": ""
      },
      {
        "name": "defining_homomorphisms",
        "type": "Vec<GroupHomomorphism>",
        "docs": ""
      }
    ]
  },
  {
    "name": "RestrictionGroup",
    "docs": "A group constructed by restricting to a specific subset satisfying group properties",
    "kind": "struct",
    "members": [
      {
        "name": "core",
        "type": "GenericGroup",
        "docs": ""
      },
      {
        "name": "parent_group",
        "type": "Box<Group>",
        "docs": ""
      },
      {
        "name": "restriction_description",
        "type": "String, // How the restriction is defined",
        "docs": ""
      }
    ]
  },
  {
    "name": "ContentManifest",
    "docs": "Content manifest for efficient loading",
    "kind": "struct",
    "members": [
      {
        "name": "theories",
        "type": "Vec<TheoryManifest>",
        "docs": ""
      },
      {
        "name": "total_items",
        "type": "usize",
        "docs": ""
      },
      {
        "name": "generated_at",
        "type": "String",
        "docs": ""
      },
      {
        "name": "version",
        "type": "String",
        "docs": ""
      }
    ]
  },
  {
    "name": "TheoryManifest",
    "docs": "Theory-level manifest",
    "kind": "struct",
    "members": [
      {
        "name": "theory_id",
        "type": "String",
        "docs": ""
      },
      {
        "name": "theory_name",
        "type": "String",
        "docs": ""
      },
      {
        "name": "files",
        "type": "Vec<ContentFile>",
        "docs": ""
      },
      {
        "name": "item_count",
        "type": "usize",
        "docs": ""
      }
    ]
  },
  {
    "name": "ContentFile",
    "docs": "Individual content file information",
    "kind": "struct",
    "members": [
      {
        "name": "file_path",
        "type": "String",
        "docs": ""
      },
      {
        "name": "content_type",
        "type": "String, // \"l1_definitions\", \"l3_constructors\", \"theorems\"",
        "docs": ""
      },
      {
        "name": "item_count",
        "type": "usize",
        "docs": ""
      },
      {
        "name": "items",
        "type": "Vec<String>, // List of content IDs in this file",
        "docs": ""
      }
    ]
  },
  {
    "name": "ContentBundle",
    "docs": "Smaller content bundle for specific theory and abstraction level",
    "kind": "struct",
    "members": [
      {
        "name": "theory_name",
        "type": "String",
        "docs": ""
      },
      {
        "name": "content_type",
        "type": "String",
        "docs": ""
      },
      {
        "name": "version",
        "type": "String",
        "docs": ""
      },
      {
        "name": "exported_at",
        "type": "String",
        "docs": ""
      },
      {
        "name": "content",
        "type": "HashMap<String, MathematicalContent>",
        "docs": ""
      }
    ]
  },
  {
    "name": "UnifiedMathExport",
    "docs": "Legacy unified export format",
    "kind": "struct",
    "members": [
      {
        "name": "theory_name",
        "type": "String",
        "docs": ""
      },
      {
        "name": "version",
        "type": "String",
        "docs": ""
      },
      {
        "name": "exported_at",
        "type": "String",
        "docs": ""
      },
      {
        "name": "content",
        "type": "HashMap<String, MathematicalContent>",
        "docs": ""
      }
    ]
  }
]