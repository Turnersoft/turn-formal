[
  {
    "name": "GroupOperationVariant",
    "docs": "Types of operations specific to group theory",
    "kind": "enum",
    "members": [
      {
        "name": "Multiplication",
        "docs": "Standard multiplication (used in most abstract groups)",
        "type_info": null
      },
      {
        "name": "Addition",
        "docs": "Addition (used in additive groups)",
        "type_info": null
      },
      {
        "name": "Composition",
        "docs": "Composition (used in transformation groups)",
        "type_info": null
      },
      {
        "name": "MatrixMultiplication",
        "docs": "Matrix multiplication (for matrix groups)",
        "type_info": null
      },
      {
        "name": "DirectProduct",
        "docs": "Direct product of groups",
        "type_info": null
      },
      {
        "name": "SemidirectProduct",
        "docs": "Semidirect product of groups",
        "type_info": null
      },
      {
        "name": "FreeProduct",
        "docs": "Free product (used in combinatorial group theory)",
        "type_info": null
      }
    ]
  },
  {
    "name": "GroupNotation",
    "docs": "Notation used for group operations",
    "kind": "enum",
    "members": [
      {
        "name": "Infix",
        "docs": "Infix notation: a * b",
        "type_info": "GroupSymbol"
      },
      {
        "name": "Function",
        "docs": "Function notation: f(a, b)",
        "type_info": "String"
      },
      {
        "name": "Juxtaposition",
        "docs": "Juxtaposition: ab (for multiplication)",
        "type_info": null
      }
    ]
  },
  {
    "name": "GroupSymbol",
    "docs": "Common symbols used in group theory",
    "kind": "enum",
    "members": [
      {
        "name": "Times",
        "docs": "Multiplication: ×",
        "type_info": null
      },
      {
        "name": "Dot",
        "docs": "Multiplication: ·",
        "type_info": null
      },
      {
        "name": "Asterisk",
        "docs": "Multiplication: *",
        "type_info": null
      },
      {
        "name": "Plus",
        "docs": "Addition: +",
        "type_info": null
      },
      {
        "name": "Circle",
        "docs": "Circle: ∘",
        "type_info": null
      },
      {
        "name": "SemiDirectLeft",
        "docs": "Semidirect product: ⋊",
        "type_info": null
      },
      {
        "name": "SemiDirectRight",
        "docs": "Semidirect product: ⋉",
        "type_info": null
      },
      {
        "name": "DirectProduct",
        "docs": "Direct product: ×",
        "type_info": null
      }
    ]
  },
  {
    "name": "GroupIdentity",
    "docs": "Identity element for group operations",
    "kind": "enum",
    "members": [
      {
        "name": "One",
        "docs": "Multiplicative identity: 1",
        "type_info": null
      },
      {
        "name": "Zero",
        "docs": "Additive identity: 0",
        "type_info": null
      },
      {
        "name": "IdentityMatrix",
        "docs": "Identity matrix",
        "type_info": null
      },
      {
        "name": "IdentityPermutation",
        "docs": "Identity permutation",
        "type_info": null
      },
      {
        "name": "IdentityFunction",
        "docs": "Identity function",
        "type_info": null
      }
    ]
  },
  {
    "name": "GroupInverse",
    "docs": "Inverse operation types in group theory",
    "kind": "enum",
    "members": [
      {
        "name": "MultiplicativeInverse",
        "docs": "Multiplicative inverse: x⁻¹",
        "type_info": null
      },
      {
        "name": "AdditiveInverse",
        "docs": "Additive inverse: -x",
        "type_info": null
      },
      {
        "name": "MatrixInverse",
        "docs": "Matrix inverse",
        "type_info": null
      },
      {
        "name": "PermutationInverse",
        "docs": "Permutation inverse",
        "type_info": null
      },
      {
        "name": "FunctionInverse",
        "docs": "Function inverse (for function composition groups)",
        "type_info": null
      }
    ]
  },
  {
    "name": "GroupInverseApplication",
    "docs": "How inverses are applied in groups",
    "kind": "enum",
    "members": [
      {
        "name": "Left",
        "docs": "Left inverse: b*a = e",
        "type_info": null
      },
      {
        "name": "Right",
        "docs": "Right inverse: a*b = e",
        "type_info": null
      },
      {
        "name": "TwoSided",
        "docs": "Two-sided inverse: a*b = b*a = e (standard for groups)",
        "type_info": null
      }
    ]
  },
  {
    "name": "GroupOperationProperty",
    "docs": "Properties specific to group operations",
    "kind": "enum",
    "members": [
      {
        "name": "Associative",
        "docs": "Whether the operation is associative (required for groups)",
        "type_info": null
      },
      {
        "name": "Commutative",
        "docs": "Whether the operation is commutative",
        "type_info": "bool"
      },
      {
        "name": "Closed",
        "docs": "Whether the operation is closed (required for groups)",
        "type_info": null
      }
    ]
  },
  {
    "name": "GroupOperation",
    "docs": "Complete binary operation structure specific to group theory",
    "kind": "struct",
    "members": [
      {
        "name": "operation_type",
        "type": "GroupOperationVariant",
        "docs": "Type of operation"
      },
      {
        "name": "notation",
        "type": "GroupNotation",
        "docs": "Notation/symbol used for this operation"
      },
      {
        "name": "identity",
        "type": "GroupIdentity",
        "docs": "Identity element (required for groups)"
      },
      {
        "name": "inverse",
        "type": "GroupInverse",
        "docs": "Inverse operation (required for groups)"
      },
      {
        "name": "inverse_application",
        "type": "GroupInverseApplication",
        "docs": "How inverses are applied (usually two-sided in groups)"
      },
      {
        "name": "properties",
        "type": "Vec<GroupOperationProperty>",
        "docs": "Properties of this operation"
      }
    ]
  },
  {
    "name": "Group",
    "docs": "A group (G,·) is a set G with a binary operation · satisfying:\n1. Associativity: (a·b)·c = a·(b·c)\n2. Identity: ∃e ∈ G: e·a = a·e = a\n3. Inverses: ∀a ∈ G, ∃b ∈ G: a·b = b·a = e\n\nKey concepts:\n- Subgroups: Subsets closed under operation\n- Cosets: Translations of subgroups\n- Normal subgroups: Invariant under conjugation\n- Quotient groups: G/N for normal N",
    "kind": "struct",
    "members": [
      {
        "name": "base_set",
        "type": "Set",
        "docs": "The underlying set"
      },
      {
        "name": "operation",
        "type": "GroupOperation",
        "docs": "The binary operation with its properties"
      },
      {
        "name": "properties",
        "type": "Vec<GroupProperty>",
        "docs": "Properties specific to the group structure"
      }
    ]
  },
  {
    "name": "TopologicalGroup",
    "docs": "A topological group is a group that is also a topological space,\nwhere the group operations are continuous.\n\nKey concepts:\n- Continuous multiplication: G × G → G\n- Continuous inversion: G → G\n- Local structure: Neighborhoods of identity\n- Haar measure: Invariant measure",
    "kind": "struct",
    "members": [
      {
        "name": "group",
        "type": "Group",
        "docs": "The underlying group"
      },
      {
        "name": "properties",
        "type": "Vec<TopologicalGroupProperty>",
        "docs": "Properties specific to the topological structure"
      }
    ]
  },
  {
    "name": "LieGroup",
    "docs": "A Lie group is a smooth manifold that is also a group,\nwhere the group operations are smooth maps.\n\nKey concepts:\n- Lie algebra: Tangent space at identity\n- Exponential map: Lie algebra → Lie group\n- One-parameter subgroups\n- Adjoint representation",
    "kind": "struct",
    "members": [
      {
        "name": "topological_group",
        "type": "TopologicalGroup",
        "docs": "The underlying topological group"
      },
      {
        "name": "properties",
        "type": "Vec<LieGroupProperty>",
        "docs": "Properties specific to the Lie structure"
      }
    ]
  },
  {
    "name": "GroupProperty",
    "docs": "Properties specific to groups",
    "kind": "enum",
    "members": [
      {
        "name": "Abelian",
        "docs": "Commutativity properties",
        "type_info": "AbelianPropertyVariant"
      },
      {
        "name": "Finite",
        "docs": "Finiteness properties",
        "type_info": "FinitePropertyVariant"
      },
      {
        "name": "FiniteGroup",
        "docs": "Simple finite group",
        "type_info": "bool"
      },
      {
        "name": "Simple",
        "docs": "Simplicity properties",
        "type_info": "SimplePropertyVariant"
      },
      {
        "name": "Solvable",
        "docs": "Solvability properties",
        "type_info": "SolvablePropertyVariant"
      },
      {
        "name": "Nilpotent",
        "docs": "Nilpotency properties",
        "type_info": "NilpotentPropertyVariant"
      }
    ]
  },
  {
    "name": "TopologicalGroupProperty",
    "docs": "Properties specific to topological groups",
    "kind": "enum",
    "members": [
      {
        "name": "Compact",
        "docs": "Compactness properties",
        "type_info": "CompactPropertyVariant"
      },
      {
        "name": "Connected",
        "docs": "Connectedness properties",
        "type_info": "ConnectedPropertyVariant"
      },
      {
        "name": "Metrizable",
        "docs": "Metrizability properties",
        "type_info": "MetrizablePropertyVariant"
      }
    ]
  },
  {
    "name": "LieGroupProperty",
    "docs": "Properties specific to Lie groups",
    "kind": "enum",
    "members": [
      {
        "name": "Semisimple",
        "docs": "Semisimplicity properties",
        "type_info": "SemisimplePropertyVariant"
      },
      {
        "name": "Reductive",
        "docs": "Reductivity properties",
        "type_info": "ReductivePropertyVariant"
      }
    ]
  },
  {
    "name": "AbelianPropertyVariant",
    "docs": "Types of abelian groups",
    "kind": "enum",
    "members": [
      {
        "name": "Abelian",
        "docs": "Commutative",
        "type_info": null
      },
      {
        "name": "NonAbelian",
        "docs": "Non-commutative",
        "type_info": null
      }
    ]
  },
  {
    "name": "FinitePropertyVariant",
    "docs": "Types of finite groups",
    "kind": "enum",
    "members": [
      {
        "name": "Finite",
        "docs": "Finite order",
        "type_info": "u32"
      },
      {
        "name": "Infinite",
        "docs": "Infinite order",
        "type_info": null
      },
      {
        "name": "LocallyFinite",
        "docs": "Locally finite (every finitely generated subgroup is finite)",
        "type_info": null
      }
    ]
  },
  {
    "name": "SimplePropertyVariant",
    "docs": "Types of simple groups",
    "kind": "enum",
    "members": [
      {
        "name": "Simple",
        "docs": "No proper normal subgroups",
        "type_info": null
      },
      {
        "name": "NonSimple",
        "docs": "Not simple",
        "type_info": null
      },
      {
        "name": "QuasiSimple",
        "docs": "Quasi-simple",
        "type_info": null
      }
    ]
  },
  {
    "name": "SolvablePropertyVariant",
    "docs": "Types of solvable groups",
    "kind": "enum",
    "members": [
      {
        "name": "Solvable",
        "docs": "Has solvable series",
        "type_info": null
      },
      {
        "name": "NonSolvable",
        "docs": "Not solvable",
        "type_info": null
      },
      {
        "name": "Polysolvable",
        "docs": "Polysolvable",
        "type_info": null
      }
    ]
  },
  {
    "name": "NilpotentPropertyVariant",
    "docs": "Types of nilpotent groups",
    "kind": "enum",
    "members": [
      {
        "name": "Nilpotent",
        "docs": "Has nilpotent series",
        "type_info": "u32"
      },
      {
        "name": "NonNilpotent",
        "docs": "Not nilpotent",
        "type_info": null
      }
    ]
  },
  {
    "name": "CompactPropertyVariant",
    "docs": "Types of compact groups",
    "kind": "enum",
    "members": [
      {
        "name": "Compact",
        "docs": "Compact",
        "type_info": null
      },
      {
        "name": "NonCompact",
        "docs": "Non-compact",
        "type_info": null
      },
      {
        "name": "LocallyCompact",
        "docs": "Locally compact",
        "type_info": null
      }
    ]
  },
  {
    "name": "ConnectedPropertyVariant",
    "docs": "Types of connected groups",
    "kind": "enum",
    "members": [
      {
        "name": "Connected",
        "docs": "Connected",
        "type_info": null
      },
      {
        "name": "SimplyConnected",
        "docs": "Simply connected (stronger than just connected)",
        "type_info": null
      },
      {
        "name": "TotallyDisconnected",
        "docs": "Totally disconnected",
        "type_info": null
      },
      {
        "name": "LocallyConnected",
        "docs": "Locally connected",
        "type_info": null
      },
      {
        "name": "LocallySimplyConnected",
        "docs": "Locally simply connected",
        "type_info": null
      }
    ]
  },
  {
    "name": "MetrizablePropertyVariant",
    "docs": "Types of metrizable groups",
    "kind": "enum",
    "members": [
      {
        "name": "Metrizable",
        "docs": "Admits compatible metric",
        "type_info": null
      },
      {
        "name": "NonMetrizable",
        "docs": "Not metrizable",
        "type_info": null
      }
    ]
  },
  {
    "name": "SemisimplePropertyVariant",
    "docs": "Types of semisimple Lie groups",
    "kind": "enum",
    "members": [
      {
        "name": "Semisimple",
        "docs": "No abelian ideals",
        "type_info": null
      },
      {
        "name": "NonSemisimple",
        "docs": "Not semisimple",
        "type_info": null
      },
      {
        "name": "Split",
        "docs": "Split semisimple",
        "type_info": null
      }
    ]
  },
  {
    "name": "ReductivePropertyVariant",
    "docs": "Types of reductive Lie groups",
    "kind": "enum",
    "members": [
      {
        "name": "Reductive",
        "docs": "Reductive",
        "type_info": null
      },
      {
        "name": "NonReductive",
        "docs": "Not reductive",
        "type_info": null
      }
    ]
  },
  {
    "name": "GroupAction",
    "docs": "A group action of G on X is a homomorphism:\nφ: G → Aut(X)\nThis combines both the action definition and target information",
    "kind": "enum",
    "members": [
      {
        "name": "SetAction",
        "docs": "Properties of the action",
        "type_info": "{\n        group: Group,\n        space: Set,\n        point: Option<Box<MathExpression>>,\n        properties: VariantSet<GroupActionProperty>,\n    }"
      },
      {
        "name": "VectorSpaceAction",
        "docs": "Properties of the action",
        "type_info": "{\n        group: Group,\n        space: String,\n        vector: Option<Vec<f64>>,\n        properties: VariantSet<GroupActionProperty>,\n    }"
      },
      {
        "name": "TopologicalSpaceAction",
        "docs": "Properties of the action",
        "type_info": "{\n        group: Group,\n        space: String,\n        point: Option<String>,\n        properties: VariantSet<GroupActionProperty>,\n    }"
      }
    ]
  },
  {
    "name": "GroupActionProperty",
    "docs": "Properties specific to group actions",
    "kind": "enum",
    "members": [
      {
        "name": "Transitive",
        "docs": "Transitive: Single orbit",
        "type_info": "TransitivityPropertyVariant"
      },
      {
        "name": "Free",
        "docs": "Free: Stabilizers are trivial",
        "type_info": "FreenessPropertyVariant"
      },
      {
        "name": "Proper",
        "docs": "Proper: Preimages of compacts are compact",
        "type_info": "PropernessPropertyVariant"
      },
      {
        "name": "Faithful",
        "docs": "Faithful: Kernel is trivial",
        "type_info": "FaithfulnessPropertyVariant"
      }
    ]
  },
  {
    "name": "TransitivityPropertyVariant",
    "docs": "Properties for transitivity of group actions",
    "kind": "enum",
    "members": [
      {
        "name": "Transitive",
        "docs": "Single orbit",
        "type_info": null
      },
      {
        "name": "FinitelyTransitive",
        "docs": "Finitely many orbits",
        "type_info": null
      },
      {
        "name": "NonTransitive",
        "docs": "Infinitely many orbits",
        "type_info": null
      }
    ]
  },
  {
    "name": "PropernessPropertyVariant",
    "docs": "Properties for properness of group actions",
    "kind": "enum",
    "members": [
      {
        "name": "Proper",
        "docs": "Proper action",
        "type_info": null
      },
      {
        "name": "NonProper",
        "docs": "Non-proper",
        "type_info": null
      },
      {
        "name": "LocallyProper",
        "docs": "Locally proper",
        "type_info": null
      }
    ]
  },
  {
    "name": "FaithfulnessPropertyVariant",
    "docs": "Properties for faithfulness of group actions",
    "kind": "enum",
    "members": [
      {
        "name": "Faithful",
        "docs": "Trivial kernel",
        "type_info": null
      },
      {
        "name": "NonFaithful",
        "docs": "Non-faithful",
        "type_info": null
      },
      {
        "name": "LocallyFaithful",
        "docs": "Locally faithful (finite kernel)",
        "type_info": null
      }
    ]
  },
  {
    "name": "FreenessPropertyVariant",
    "docs": "Properties for freeness of group actions",
    "kind": "enum",
    "members": [
      {
        "name": "Free",
        "docs": "Trivial stabilizers",
        "type_info": null
      },
      {
        "name": "NonFree",
        "docs": "Non-free",
        "type_info": null
      },
      {
        "name": "LocallyFree",
        "docs": "Locally free (finite stabilizers)",
        "type_info": null
      }
    ]
  },
  {
    "name": "GroupRelationEntity",
    "docs": "Entity information for group relation operations",
    "kind": "struct",
    "members": [
      {
        "name": "id",
        "type": "Option<String>",
        "docs": "Optional ID for referencing this relation"
      },
      {
        "name": "description",
        "type": "Option<String>",
        "docs": "Optional description explaining this relation instance"
      },
      {
        "name": "tags",
        "type": "Vec<(String, String)>",
        "docs": "Optional key-value pairs for additional context"
      }
    ]
  },
  {
    "name": "GroupRelation",
    "docs": "Relations specific to group theory\nthese are the verbs in the language of group theory",
    "kind": "enum",
    "members": [
      {
        "name": "IsSubgroupOf",
        "docs": "One group is a subgroup of another",
        "type_info": "{\n        entity: GroupRelationEntity,\n        subgroup: MathExpression,\n        group: MathExpression,\n    }"
      },
      {
        "name": "IsNormalSubgroupOf",
        "docs": "One group is a normal subgroup of another",
        "type_info": "{\n        entity: GroupRelationEntity,\n        subgroup: MathExpression,\n        group: MathExpression,\n    }"
      },
      {
        "name": "IsIsomorphicTo",
        "docs": "Two groups are isomorphic",
        "type_info": "{\n        entity: GroupRelationEntity,\n        first: MathExpression,\n        second: MathExpression,\n    }"
      },
      {
        "name": "IsQuotientOf",
        "docs": "One group is a quotient of another",
        "type_info": "{\n        entity: GroupRelationEntity,\n        quotient: MathExpression,\n        group: MathExpression,\n        normal_subgroup: MathExpression,\n    }"
      },
      {
        "name": "IsInCenterOf",
        "docs": "Element is in the center of a group",
        "type_info": "{\n        entity: GroupRelationEntity,\n        element: MathExpression,\n        group: MathExpression,\n    }"
      },
      {
        "name": "AreConjugateIn",
        "docs": "Two elements are conjugate in a group",
        "type_info": "{\n        entity: GroupRelationEntity,\n        element1: MathExpression,\n        element2: MathExpression,\n        group: MathExpression,\n    }"
      },
      {
        "name": "HasOrderInGroup",
        "docs": "An element has a specified order in a group",
        "type_info": "{\n        entity: GroupRelationEntity,\n        element: MathExpression,\n        group: MathExpression,\n        order: usize,\n    }"
      },
      {
        "name": "HasIndexInGroup",
        "docs": "A subgroup is of a specific index in a group",
        "type_info": "{\n        entity: GroupRelationEntity,\n        subgroup: MathExpression,\n        group: MathExpression,\n        index: usize,\n    }"
      },
      {
        "name": "HasOrder",
        "docs": "A group has a specific number of elements",
        "type_info": "{\n        entity: GroupRelationEntity,\n        group: MathExpression,\n        order: usize,\n    }"
      },
      {
        "name": "IsCyclicWithGenerator",
        "docs": "A group is cyclic with a specific generator",
        "type_info": "{\n        entity: GroupRelationEntity,\n        group: MathExpression,\n        generator: MathExpression,\n    }"
      },
      {
        "name": "NormalizesSubgroup",
        "docs": "An element normalizes a subgroup",
        "type_info": "{\n        entity: GroupRelationEntity,\n        element: MathExpression,\n        subgroup: MathExpression,\n        group: MathExpression,\n    }"
      },
      {
        "name": "CentralizesSubgroup",
        "docs": "An element centralizes a subgroup",
        "type_info": "{\n        entity: GroupRelationEntity,\n        element: MathExpression,\n        subgroup: MathExpression,\n        group: MathExpression,\n    }"
      },
      {
        "name": "IsCharacteristicSubgroupOf",
        "docs": "A subgroup is characteristic",
        "type_info": "{\n        entity: GroupRelationEntity,\n        subgroup: MathExpression,\n        group: MathExpression,\n    }"
      },
      {
        "name": "OrderDivides",
        "docs": "The order of one group divides the order of another",
        "type_info": "{\n        entity: GroupRelationEntity,\n        group1: MathExpression,\n        group2: MathExpression,\n    }"
      },
      {
        "name": "HasUniqueInverse",
        "docs": "An element has a unique inverse in a group",
        "type_info": "{\n        entity: GroupRelationEntity,\n        element: MathExpression,\n        group: MathExpression,\n    }"
      },
      {
        "name": "SylowSubgroupProperties",
        "docs": "Sylow p-subgroup properties",
        "type_info": "{\n        entity: GroupRelationEntity,\n        prime: MathExpression,\n        group: MathExpression,\n    }"
      },
      {
        "name": "IsInverseOf",
        "docs": "One element is the inverse of another",
        "type_info": "{\n        entity: GroupRelationEntity,\n        element: MathExpression,\n        inverse: MathExpression,\n        group: MathExpression,\n    }"
      },
      {
        "name": "IsHomomorphism",
        "docs": "A homomorphism between groups",
        "type_info": "{\n        entity: GroupRelationEntity,\n        homomorphism: MathExpression,\n        domain: MathExpression,\n        codomain: MathExpression,\n    }"
      },
      {
        "name": "IsomorphicEmbedding",
        "docs": "An isomorphic embedding of one group into another",
        "type_info": "{\n        entity: GroupRelationEntity,\n        source: MathExpression,\n        target: MathExpression,\n    }"
      }
    ]
  },
  {
    "name": "GroupObject",
    "docs": "Important abstract mathematical objects in group theory",
    "kind": "enum",
    "members": [
      {
        "name": "Kernel",
        "docs": "The homomorphism",
        "type_info": "{\n        entity: GroupRelationEntity,\n        homomorphism: Box<MathExpression>,\n    }"
      },
      {
        "name": "Image",
        "docs": "The homomorphism",
        "type_info": "{\n        entity: GroupRelationEntity,\n        homomorphism: Box<MathExpression>,\n    }"
      },
      {
        "name": "QuotientGroup",
        "docs": "The normal subgroup",
        "type_info": "{\n        entity: GroupRelationEntity,\n        group: Box<MathExpression>,\n        normal_subgroup: Box<MathExpression>,\n    }"
      },
      {
        "name": "SymmetricGroup",
        "docs": "The base set",
        "type_info": "{\n        entity: GroupRelationEntity,\n        base_set: Box<MathExpression>,\n    }"
      },
      {
        "name": "SylowSubgroup",
        "docs": "The group",
        "type_info": "{\n        entity: GroupRelationEntity,\n        prime: Box<MathExpression>,\n        group: Box<MathExpression>,\n    }"
      },
      {
        "name": "Center",
        "docs": "The group",
        "type_info": "{\n        entity: GroupRelationEntity,\n        group: Box<MathExpression>,\n    }"
      },
      {
        "name": "Centralizer",
        "docs": "The group",
        "type_info": "{\n        entity: GroupRelationEntity,\n        element: Box<MathExpression>,\n        group: Box<MathExpression>,\n    }"
      },
      {
        "name": "Normalizer",
        "docs": "The group",
        "type_info": "{\n        entity: GroupRelationEntity,\n        subgroup: Box<MathExpression>,\n        group: Box<MathExpression>,\n    }"
      },
      {
        "name": "CommutatorSubgroup",
        "docs": "The group",
        "type_info": "{\n        entity: GroupRelationEntity,\n        group: Box<MathExpression>,\n    }"
      },
      {
        "name": "GroupOrder",
        "docs": "The group",
        "type_info": "{\n        entity: GroupRelationEntity,\n        group: Box<MathExpression>,\n    }"
      },
      {
        "name": "ElementOrder",
        "docs": "The group",
        "type_info": "{\n        entity: GroupRelationEntity,\n        element: Box<MathExpression>,\n        group: Box<MathExpression>,\n    }"
      }
    ]
  },
  {
    "name": "GroupElement",
    "docs": "A representation of a group element for type-safe operations",
    "kind": "struct",
    "members": [
      {
        "name": "group",
        "type": "Box<Group>",
        "docs": "The group this element belongs to"
      },
      {
        "name": "value",
        "type": "ElementValue",
        "docs": "The underlying representation of the element (depends on the group's structure)"
      }
    ]
  },
  {
    "name": "ElementValue",
    "docs": "Different types of element values depending on the group structure",
    "kind": "enum",
    "members": [
      {
        "name": "Integer",
        "docs": "A numeric element (useful for Z/nZ, etc.)",
        "type_info": "i64"
      },
      {
        "name": "Permutation",
        "docs": "A permutation (for symmetric groups)",
        "type_info": "Vec<usize>"
      },
      {
        "name": "Matrix",
        "docs": "A matrix (for matrix groups)",
        "type_info": "Vec<Vec<i64>>"
      },
      {
        "name": "Symbol",
        "docs": "A symbolic element (for abstract elements)",
        "type_info": "String"
      }
    ]
  },
  {
    "name": "GroupExpression",
    "docs": "Represents operations in a group theory context",
    "kind": "enum",
    "members": [
      {
        "name": "Element",
        "docs": "An element in a group",
        "type_info": "GroupElement"
      },
      {
        "name": "Identity",
        "docs": "The identity element of a group",
        "type_info": "Box<Group>"
      },
      {
        "name": "Operation",
        "docs": "The right operand",
        "type_info": "{\n        group: Box<Group>,\n        left: Box<GroupExpression>,\n        right: Box<GroupExpression>,\n    }"
      },
      {
        "name": "Inverse",
        "docs": "The element to invert",
        "type_info": "{\n        group: Box<Group>,\n        element: Box<GroupExpression>,\n    }"
      },
      {
        "name": "Commutator",
        "docs": "The second element",
        "type_info": "{\n        group: Box<Group>,\n        a: Box<GroupExpression>,\n        b: Box<GroupExpression>,\n    }"
      },
      {
        "name": "Coset",
        "docs": "Whether this is a left or right coset",
        "type_info": "{\n        group: Box<Group>,\n        element: Box<GroupExpression>,\n        subgroup: Box<Group>,\n        is_left: bool,\n    }"
      },
      {
        "name": "Variable",
        "docs": "The name of the variable",
        "type_info": "{\n        group: Box<Group>,\n        name: String,\n    }"
      },
      {
        "name": "Action",
        "docs": "The action being applied",
        "type_info": "{\n        element: Box<GroupExpression>,\n        action: Box<GroupAction>,\n    }"
      },
      {
        "name": "Power",
        "docs": "The exponent",
        "type_info": "{\n        group: Box<Group>,\n        base: Box<GroupExpression>,\n        exponent: i32,\n    }"
      }
    ]
  },
  {
    "name": "GroupExpressionError",
    "docs": "Error type for group expression evaluation",
    "kind": "enum",
    "members": [
      {
        "name": "InvalidElement",
        "docs": "Element is not in the group",
        "type_info": "String"
      },
      {
        "name": "InvalidOperation",
        "docs": "Operation not defined for these elements",
        "type_info": "String"
      },
      {
        "name": "Other",
        "docs": "Other errors",
        "type_info": "String"
      }
    ]
  },
  {
    "name": "GroupError",
    "docs": "",
    "kind": "enum",
    "members": [
      {
        "name": "InvalidElement",
        "docs": "",
        "type_info": "String"
      },
      {
        "name": "InvalidOperation",
        "docs": "",
        "type_info": "String"
      },
      {
        "name": "Other",
        "docs": "",
        "type_info": "String"
      }
    ]
  }
]