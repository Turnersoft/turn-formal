use serde::{Deserialize, Serialize};

use crate::subjects::math::formalism::abstraction_level::{AbstractionLevel, GetAbstractionLevel};
use crate::subjects::math::theories::groups::definitions::CyclicGroup;
use crate::turn_render::math_node::{
    BracketSize, BracketStyle, MathNode, MathNodeContent, ToTurnMath,
};
use crate::turn_render::section_node::{
    AbstractionMetadata, MathDocument, ParagraphNode, RichTextSegment, Section, SectionContentNode,
    SelectableProperty, StructuredMathContentNode, ToSectionNode, p_text,
};

impl ToTurnMath for CyclicGroup {
    fn to_turn_math(&self, master_id: String) -> MathNode {
        // Create a bracket node containing the generator
        let gen_node = self.generator.to_turn_math(format!("{}-gen", master_id));

        let content = MathNodeContent::Bracketed {
            inner: Box::new(gen_node),
            style: BracketStyle::Angle,
            size: BracketSize::Auto,
        };

        // For infinite cyclic group (Z), just use the generator
        // For finite cyclic group (Z_n), add order information
        let final_content = if let Some(order) = self.order {
            Box::new(MathNodeContent::Text(format!(
                "C_{} = ⟨{:?}⟩",
                order, self.generator
            )))
        } else {
            Box::new(content)
        };

        MathNode {
            id: master_id,
            content: final_content,
        }
    }
}

impl ToSectionNode for CyclicGroup {
    fn to_section_node(&self, id_prefix: &str) -> Section {
        let formalism_obj_level: AbstractionLevel = self.level();

        // Determine title based on whether it's a finite or infinite cyclic group
        let title = if let Some(order) = self.order {
            format!("Cyclic Group C_{} generated by {:?}", order, self.generator)
        } else {
            format!("Infinite Cyclic Group generated by {:?}", self.generator)
        };

        // Create content nodes with group information
        let mut content_nodes = vec![SectionContentNode::Paragraph(p_text(&format!(
            "Generator: {:?}",
            self.generator
        )))];

        // Add order information if available
        if let Some(order) = self.order {
            content_nodes.push(SectionContentNode::Paragraph(p_text(&format!(
                "Order: {}",
                order
            ))));
        } else {
            content_nodes.push(SectionContentNode::Paragraph(p_text("Order: Infinite")));
        }

        // Add core group information
        content_nodes.push(SectionContentNode::Paragraph(p_text(&format!(
            "Base set: {:?}",
            self.core.base_set
        ))));

        content_nodes.push(SectionContentNode::Paragraph(p_text(&format!(
            "Operation: {:?} ({:?})",
            self.core.operation.operation_type, self.core.operation.notation
        ))));

        // Add abstraction level specific content
        match formalism_obj_level {
            AbstractionLevel::Level1 => {
                content_nodes.push(SectionContentNode::Paragraph(p_text(
                    "This is L1: A general schema for any cyclic group.",
                )));
            }
            AbstractionLevel::Level2 => {
                content_nodes.push(SectionContentNode::Paragraph(p_text(
                    "This is L2: A specific type of cyclic group with defined properties.",
                )));
            }
            AbstractionLevel::Level3 => {
                content_nodes.push(SectionContentNode::Paragraph(p_text(
                    "This is L3: A constructor for building a cyclic group from a generator.",
                )));
            }
            AbstractionLevel::Level4 => {
                content_nodes.push(SectionContentNode::Paragraph(p_text(
                    "This is L4: A concrete cyclic group with fully specified generator and elements."
                )));
            }
        };

        // Create selectable properties
        let mut selectable_props = vec![];

        // Add properties from core group if any
        if !self.core.props.inner.is_empty() {
            for prop in self.core.props.inner.iter() {
                selectable_props.push(SelectableProperty {
                    name: format!("{:?}", prop),
                    current_variant: format!("{:?}", prop),
                    all_variants: vec![format!("{:?}", prop)],
                    description: Some("Group property".to_string()),
                    variant_descriptions: None,
                    property_type_def_id: None,
                });
            }
        }

        // Add order as a selectable property
        selectable_props.push(SelectableProperty {
            name: "Order".to_string(),
            current_variant: if let Some(order) = self.order {
                format!("Finite({})", order)
            } else {
                "Infinite".to_string()
            },
            all_variants: vec!["Finite(n)".to_string(), "Infinite".to_string()],
            description: Some("Order of the cyclic group".to_string()),
            variant_descriptions: None,
            property_type_def_id: None,
        });

        Section {
            id: format!("{}-cyclicgroup-section", id_prefix),
            title: Some(p_text(&title)),
            content: vec![SectionContentNode::StructuredMath(
                StructuredMathContentNode::Definition {
                    term_display: vec![RichTextSegment::Text(title.clone())],
                    formal_term: Some(self.to_turn_math(format!("{}-formalTerm", id_prefix))),
                    label: Some(format!("Definition ({})", title)),
                    body: content_nodes,
                    abstraction_meta: Some(AbstractionMetadata {
                        level: Some(formalism_obj_level as u8),
                        source_template_id: None,
                        specified_parameters: None,
                        universally_quantified_properties: None,
                    }),
                    selectable_properties: if selectable_props.is_empty() {
                        None
                    } else {
                        Some(selectable_props)
                    },
                },
            )],
            sub_sections: vec![],
            metadata: Some(vec![(
                "type".to_string(),
                "CyclicGroupDefinition".to_string(),
            )]),
            display_options: None,
        }
    }

    fn to_math_document(&self, id_prefix: &str) -> MathDocument {
        let main_section = self.to_section_node(&format!("{}-main", id_prefix));

        MathDocument {
            id: format!("{}-doc", id_prefix),
            title: main_section.title.as_ref().map_or_else(
                || "Cyclic Group Document".to_string(),
                |p| {
                    p.segments
                        .iter()
                        .map(|s| match s {
                            RichTextSegment::Text(t) => t.clone(),
                            RichTextSegment::StyledText { text, .. } => text.clone(),
                            _ => "".to_string(),
                        })
                        .collect::<String>()
                },
            ),
            language: Some("en-US".to_string()),
            version: Some("1.0".to_string()),
            authors: None,
            date_published: None,
            date_modified: None,
            abstract_content: None,
            table_of_contents: None,
            body: vec![main_section],
            footnotes: None,
            glossary: None,
            bibliography: None,
            document_metadata: None,
        }
    }

    fn to_tooltip_node(&self, id_prefix: &str) -> Vec<RichTextSegment> {
        let name = if let Some(order) = self.order {
            format!("Cyclic Group C_{} generated by {:?}", order, self.generator)
        } else {
            format!("Infinite Cyclic Group generated by {:?}", self.generator)
        };

        vec![RichTextSegment::Text(name)]
    }

    fn to_reference_node(&self, id_prefix: &str) -> Vec<RichTextSegment> {
        let name = if let Some(order) = self.order {
            format!("Cyclic Group C_{}", order)
        } else {
            format!("Infinite Cyclic Group ⟨{:?}⟩", self.generator)
        };

        vec![crate::turn_render::section_node::link_to_definition(
            &name,
            &format!("{}-cyclicgroup-section", id_prefix),
            Some("GroupTheory"),
        )]
    }
}
