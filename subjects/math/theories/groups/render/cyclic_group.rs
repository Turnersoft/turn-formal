use serde::{Deserialize, Serialize};

use crate::subjects::math::formalism::abstraction_level::{AbstractionLevel, GetAbstractionLevel};
use crate::subjects::math::theories::groups::definitions::CyclicGroup;
use crate::turn_render::math_node::{
    BracketSize, BracketStyle, MathNode, MathNodeContent, ToTurnMath,
};
use crate::turn_render::section_node::{
    AbstractionMetadata, AcademicMetadata, ContentMetadata, DocumentRelationships,
    DocumentStructure, LinkTarget, MathDocument, MathematicalContentType, ParagraphNode,
    RichTextSegment, ScientificPaperContent, Section, SectionContentNode, SelectableProperty,
    StructuredMathContentNode, ToSectionNode,
};

impl ToTurnMath for CyclicGroup {
    fn to_turn_math(&self, master_id: String) -> MathNode {
        // Create a bracket node containing the generator
        let gen_node = self.generator.to_turn_math(format!("{}-gen", master_id));

        let content = MathNodeContent::Bracketed {
            inner: Box::new(gen_node),
            style: BracketStyle::Angle,
            size: BracketSize::Auto,
        };

        // For infinite cyclic group (Z), just use the generator
        // For finite cyclic group (Z_n), add order information
        let final_content = if let Some(order) = self.order {
            // Use proper mathematical notation C_n with subscript for finite cyclic groups
            Box::new(MathNodeContent::Identifier {
                body: "C".to_string(),
                pre_script: None,
                mid_script: None,
                post_script: Some(Box::new(MathNode {
                    id: format!("{}_order", master_id),
                    content: Box::new(MathNodeContent::Quantity {
                        number: order.to_string(),
                        unit: None,
                    }),
                })),
                primes: 0,
                is_function: false,
            })
        } else {
            Box::new(content)
        };

        MathNode {
            id: master_id,
            content: final_content,
        }
    }
}

impl ToSectionNode for CyclicGroup {
    fn to_section_node(&self, id_prefix: &str) -> Section {
        let formalism_obj_level: AbstractionLevel = self.level();

        // **ABSTRACT MATHEMATICAL NOTATION** - Use C_n instead of concrete examples
        let title = if let Some(_order) = self.order {
            // Use abstract notation C_n for finite cyclic groups
            "C_n".to_string()
        } else {
            // Use ℤ for infinite cyclic groups
            "ℤ".to_string()
        };

        // **DETAILED MATHEMATICAL EXPLANATION**
        let mut content_nodes = vec![
            SectionContentNode::Paragraph(ParagraphNode {
                segments: vec![RichTextSegment::Text(
                    "A cyclic group is a group that is generated by a single element. Every element in the group can be expressed as a power of this generator.".to_string()
                )],
                alignment: None,
            }),
            SectionContentNode::Paragraph(ParagraphNode {
                segments: vec![RichTextSegment::Text(
                    "Definition: A group G is cyclic if there exists an element g ∈ G such that G = ⟨g⟩ = {g^n | n ∈ ℤ}.".to_string()
                )],
                alignment: None,
            }),
        ];

        // Add order-specific mathematical details
        if let Some(order) = self.order {
            content_nodes.push(SectionContentNode::Paragraph(ParagraphNode {
                segments: vec![RichTextSegment::Text(format!(
                    "Finite Cyclic Group: C_n represents a cyclic group of order n. For this instance: order = {}",
                    order
                ))],
                alignment: None,
            }));
            content_nodes.push(SectionContentNode::Paragraph(ParagraphNode {
                segments: vec![RichTextSegment::Text(
                    "Properties: C_n ≅ ℤ/nℤ (isomorphic to integers modulo n)".to_string(),
                )],
                alignment: None,
            }));
        } else {
            content_nodes.push(SectionContentNode::Paragraph(ParagraphNode {
                segments: vec![RichTextSegment::Text(
                    "Infinite Cyclic Group: ℤ represents the infinite cyclic group of integers under addition.".to_string()
                )],
                alignment: None,
            }));
            content_nodes.push(SectionContentNode::Paragraph(ParagraphNode {
                segments: vec![RichTextSegment::Text(
                    "Properties: ℤ is the unique (up to isomorphism) infinite cyclic group."
                        .to_string(),
                )],
                alignment: None,
            }));
        }

        content_nodes.push(SectionContentNode::Paragraph(ParagraphNode {
            segments: vec![RichTextSegment::Text(format!(
                "Generator: {:?}",
                self.generator
            ))],
            alignment: None,
        }));

        content_nodes.push(SectionContentNode::Paragraph(ParagraphNode {
            segments: vec![RichTextSegment::Text(
                "Applications: Cyclic groups appear in modular arithmetic, crystallography, Fourier analysis, and as building blocks for more complex algebraic structures.".to_string()
            )],
            alignment: None,
        }));

        // Link to group basic information instead of embedding it directly
        content_nodes.push(SectionContentNode::Paragraph(ParagraphNode {
            segments: vec![
                RichTextSegment::Text("For the underlying group structure, see ".to_string()),
                RichTextSegment::Link {
                    content: vec![RichTextSegment::Text("Group Theory".to_string())],
                    target: LinkTarget::DefinitionId {
                        term_id: format!("{}-groupbasic-section", id_prefix),
                        theory_context: Some("GroupTheory".to_string()),
                    },
                    tooltip: Some(format!(
                        "View definition of {}-groupbasic-section",
                        id_prefix
                    )),
                },
                RichTextSegment::Text(".".to_string()),
            ],
            alignment: None,
        }));

        // Add abstraction level specific content
        match formalism_obj_level {
            AbstractionLevel::Level1 => {
                content_nodes.push(SectionContentNode::Paragraph(ParagraphNode {
                    segments: vec![RichTextSegment::Text(
                        "This is L1: A general schema for any cyclic group.".to_string(),
                    )],
                    alignment: None,
                }));
            }
            AbstractionLevel::Level2 => {
                content_nodes.push(SectionContentNode::Paragraph(ParagraphNode {
                    segments: vec![RichTextSegment::Text(
                        "This is L2: A specific type of cyclic group with defined properties."
                            .to_string(),
                    )],
                    alignment: None,
                }));
            }
            AbstractionLevel::Level3 => {
                content_nodes.push(SectionContentNode::Paragraph(ParagraphNode {
                    segments: vec![RichTextSegment::Text(
                        "This is L3: A constructor for building a cyclic group from a generator."
                            .to_string(),
                    )],
                    alignment: None,
                }));
            }
            AbstractionLevel::Level4 => {
                content_nodes.push(SectionContentNode::Paragraph(ParagraphNode {
                    segments: vec![RichTextSegment::Text(
                        "This is L4: A concrete cyclic group with fully specified generator and elements.".to_string(),
                    )],
                    alignment: None,
                }));
            }
        };

        // Create selectable properties
        let mut selectable_props = vec![];

        // Add properties from core group if any
        if !self.core.props.inner.is_empty() {
            for prop in self.core.props.inner.iter() {
                selectable_props.push(SelectableProperty {
                    name: format!("{:?}", prop),
                    current_variant: format!("{:?}", prop),
                    all_variants: vec![format!("{:?}", prop)],
                    description: Some("Group property".to_string()),
                    variant_descriptions: None,
                    property_type_def_id: None,
                });
            }
        }

        // Add order as a selectable property
        selectable_props.push(SelectableProperty {
            name: "Order".to_string(),
            current_variant: if let Some(order) = self.order {
                format!("Finite({})", order)
            } else {
                "Infinite".to_string()
            },
            all_variants: vec!["Finite(n)".to_string(), "Infinite".to_string()],
            description: Some("Order of the cyclic group".to_string()),
            variant_descriptions: None,
            property_type_def_id: None,
        });

        Section {
            id: format!("{}-cyclicgroup-section", id_prefix),
            title: Some(ParagraphNode {
                segments: vec![RichTextSegment::Text(title.clone())],
                alignment: None,
            }),
            content: vec![SectionContentNode::StructuredMath(
                StructuredMathContentNode::Definition {
                    term_display: vec![RichTextSegment::Text(title.clone())],
                    formal_term: Some(self.to_turn_math(format!("{}-formalTerm", id_prefix))),
                    label: Some(format!("Definition ({})", title)),
                    body: content_nodes,
                    abstraction_meta: Some(AbstractionMetadata {
                        level: Some(formalism_obj_level as u8),
                        source_template_id: None,
                        specified_parameters: vec![],
                        universally_quantified_properties: vec![],
                    }),
                    selectable_properties: if selectable_props.is_empty() {
                        vec![]
                    } else {
                        selectable_props
                    },
                },
            )],
            metadata: vec![("type".to_string(), "CyclicGroupDefinition".to_string())],
            display_options: None,
        }
    }

    fn to_math_document(&self, id_prefix: &str) -> MathDocument {
        let main_section = self.to_section_node(&format!("{}-main", id_prefix));
        let title = main_section.title.as_ref().map_or_else(
            || "Cyclic Group Document".to_string(),
            |p| {
                p.segments
                    .iter()
                    .map(|s| match s {
                        RichTextSegment::Text(t) => t.clone(),
                        RichTextSegment::StyledText { text, .. } => text.clone(),
                        _ => "".to_string(),
                    })
                    .collect::<String>()
            },
        );

        MathDocument {
            id: format!("{}-doc", id_prefix),
            content_type: MathematicalContentType::ScientificPaper(ScientificPaperContent {
                title,
                paper_type: crate::turn_render::section_node::PaperType::Research,
                venue: None,
                peer_reviewed: false,
                content_metadata: ContentMetadata {
                    language: Some("en-US".to_string()),
                    version: Some("1.0".to_string()),
                    created_at: None,
                    last_modified: None,
                    content_hash: None,
                },
                academic_metadata: AcademicMetadata {
                    authors: vec![],
                    date_published: None,
                    date_modified: None,
                    venue: None,
                    doi: None,
                    keywords: vec![],
                },
                structure: DocumentStructure {
                    abstract_content: None,
                    table_of_contents: None,
                    body: vec![main_section],
                    footnotes: vec![],
                    glossary: vec![],
                    bibliography: vec![],
                },
                relationships: DocumentRelationships {
                    parent_documents: vec![],
                    child_documents: vec![],
                    related_concepts: vec![],
                    cross_references: vec![],
                    dependency_graph: None,
                },
            }),
        }
    }

    fn to_tooltip_node(&self, id_prefix: &str) -> Vec<RichTextSegment> {
        let name = if let Some(order) = self.order {
            format!("Cyclic Group C_{} generated by {:?}", order, self.generator)
        } else {
            format!("Infinite Cyclic Group generated by {:?}", self.generator)
        };

        vec![RichTextSegment::Text(name)]
    }

    fn to_reference_node(&self, id_prefix: &str) -> Vec<RichTextSegment> {
        let name = if let Some(order) = self.order {
            format!("Cyclic Group C_{}", order)
        } else {
            format!("Infinite Cyclic Group ⟨{:?}⟩", self.generator)
        };

        vec![RichTextSegment::Link {
            content: vec![RichTextSegment::Text(name)],
            target: LinkTarget::DefinitionId {
                term_id: format!("{}-cyclicgroup-section", id_prefix),
                theory_context: Some("GroupTheory".to_string()),
            },
            tooltip: Some(format!(
                "View definition of {}-cyclicgroup-section",
                id_prefix
            )),
        }]
    }
}
