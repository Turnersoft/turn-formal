[
  {
    "name": "TopologyRelationEntity",
    "docs": "Entity information for topology relation operations",
    "kind": "struct",
    "members": [
      {
        "name": "id",
        "type": "Option<String>",
        "docs": "Optional ID for referencing this relation"
      },
      {
        "name": "description",
        "type": "Option<String>",
        "docs": "Optional description explaining this relation instance"
      },
      {
        "name": "tags",
        "type": "Vec<(String, String)>",
        "docs": "Optional key-value pairs for additional context"
      }
    ]
  },
  {
    "name": "TopologyRelation",
    "docs": "Relations specific to topology",
    "kind": "enum",
    "members": [
      {
        "name": "IsOpen",
        "docs": "A set is open in a topological space",
        "type_info": "{\n        entity: TopologyRelationEntity,\n        set: MathExpression,\n        space: MathExpression,\n    }"
      },
      {
        "name": "IsClosed",
        "docs": "A set is closed in a topological space",
        "type_info": "{\n        entity: TopologyRelationEntity,\n        set: MathExpression,\n        space: MathExpression,\n    }"
      },
      {
        "name": "IsNeighborhood",
        "docs": "A set is a neighborhood of a point",
        "type_info": "{\n        entity: TopologyRelationEntity,\n        set: MathExpression,\n        point: MathExpression,\n        space: MathExpression,\n    }"
      },
      {
        "name": "IsBasis",
        "docs": "A set is a basis for a topology",
        "type_info": "{\n        entity: TopologyRelationEntity,\n        collection: MathExpression,\n        space: MathExpression,\n    }"
      },
      {
        "name": "IsClosure",
        "docs": "A set is the closure of another",
        "type_info": "{\n        entity: TopologyRelationEntity,\n        closure: MathExpression,\n        set: MathExpression,\n        space: MathExpression,\n    }"
      },
      {
        "name": "IsInterior",
        "docs": "A set is the interior of another",
        "type_info": "{\n        entity: TopologyRelationEntity,\n        interior: MathExpression,\n        set: MathExpression,\n        space: MathExpression,\n    }"
      },
      {
        "name": "IsBoundary",
        "docs": "A set is the boundary of another",
        "type_info": "{\n        entity: TopologyRelationEntity,\n        boundary: MathExpression,\n        set: MathExpression,\n        space: MathExpression,\n    }"
      },
      {
        "name": "IsConnected",
        "docs": "A topological space is connected",
        "type_info": "{\n        entity: TopologyRelationEntity,\n        space: MathExpression,\n    }"
      },
      {
        "name": "IsPathConnected",
        "docs": "A topological space is path-connected",
        "type_info": "{\n        entity: TopologyRelationEntity,\n        space: MathExpression,\n    }"
      },
      {
        "name": "IsCompact",
        "docs": "A topological space is compact",
        "type_info": "{\n        entity: TopologyRelationEntity,\n        space: MathExpression,\n    }"
      },
      {
        "name": "IsHausdorff",
        "docs": "A topological space is Hausdorff",
        "type_info": "{\n        entity: TopologyRelationEntity,\n        space: MathExpression,\n    }"
      },
      {
        "name": "IsContinuous",
        "docs": "A function is continuous",
        "type_info": "{\n        entity: TopologyRelationEntity,\n        function: MathExpression,\n        domain: MathExpression,\n        codomain: MathExpression,\n    }"
      },
      {
        "name": "AreHomeomorphic",
        "docs": "Two topological spaces are homeomorphic",
        "type_info": "{\n        entity: TopologyRelationEntity,\n        first: MathExpression,\n        second: MathExpression,\n    }"
      },
      {
        "name": "Converges",
        "docs": "A sequence converges to a point",
        "type_info": "{\n        entity: TopologyRelationEntity,\n        sequence: MathExpression,\n        limit: MathExpression,\n        space: MathExpression,\n    }"
      },
      {
        "name": "IsHomeomorphism",
        "docs": "A function is a homeomorphism",
        "type_info": "{\n        entity: TopologyRelationEntity,\n        function: MathExpression,\n        domain: MathExpression,\n        codomain: MathExpression,\n    }"
      },
      {
        "name": "IsSubspace",
        "docs": "A space is a subspace of another",
        "type_info": "{\n        entity: TopologyRelationEntity,\n        subspace: MathExpression,\n        space: MathExpression,\n    }"
      },
      {
        "name": "IsOpenCover",
        "docs": "A collection is an open cover of a space",
        "type_info": "{\n        entity: TopologyRelationEntity,\n        cover: MathExpression,\n        space: MathExpression,\n    }"
      },
      {
        "name": "HasFiniteSubcover",
        "docs": "A cover has a finite subcover",
        "type_info": "{\n        entity: TopologyRelationEntity,\n        cover: MathExpression,\n        space: MathExpression,\n    }"
      },
      {
        "name": "IsLocallyCompact",
        "docs": "A space is locally compact",
        "type_info": "{\n        entity: TopologyRelationEntity,\n        space: MathExpression,\n    }"
      },
      {
        "name": "IsParacompact",
        "docs": "A space is paracompact",
        "type_info": "{\n        entity: TopologyRelationEntity,\n        space: MathExpression,\n    }"
      },
      {
        "name": "IsMetrizable",
        "docs": "A space is metrizable",
        "type_info": "{\n        entity: TopologyRelationEntity,\n        space: MathExpression,\n    }"
      },
      {
        "name": "Custom",
        "docs": "Custom topology relation",
        "type_info": "{\n        entity: TopologyRelationEntity,\n        name: String,\n        parameters: Vec<MathExpression>,\n    }"
      }
    ]
  },
  {
    "name": "Topology",
    "docs": "Topology structure\nA collection τ of open sets on a space X satisfying:\n1. ∅ and X are in τ\n2. τ is closed under arbitrary unions\n3. τ is closed under finite intersections",
    "kind": "struct",
    "members": [
      {
        "name": "properties",
        "type": "VariantSet<TopologyProperty>",
        "docs": "Properties of the topology (compactness, connectedness, etc.)"
      }
    ]
  },
  {
    "name": "TopologyProperty",
    "docs": "",
    "kind": "enum",
    "members": [
      {
        "name": "Compactness",
        "docs": "Compactness: every open cover has a finite subcover\nFor any open cover {Uᵢ}ᵢ∈I, ∃ finite J⊆I: X = ⋃ᵢ∈J Uᵢ",
        "type_info": "CompactnessPropertyVariant"
      },
      {
        "name": "Connectedness",
        "docs": "Connectedness: cannot be split into disjoint open sets\nIf X = U∪V with U,V open and U∩V=∅, then U=∅ or V=∅",
        "type_info": "ConnectednessPropertyVariant"
      },
      {
        "name": "Boundedness",
        "docs": "Boundedness: contained in some \"ball\"\n∃x₀,r: X ⊆ B(x₀,r)",
        "type_info": "TopologicalBoundednessPropertyVariant"
      },
      {
        "name": "Separable",
        "docs": "Separability: has countable dense subset\n∃ countable D⊆X: D̄ = X",
        "type_info": "SeparablePropertyVariant"
      },
      {
        "name": "Countable",
        "docs": "Countability: cardinality property\n|X| ≤ ℵ₀ or |X| > ℵ₀",
        "type_info": "CountablePropertyVariant"
      },
      {
        "name": "Paracompact",
        "docs": "Paracompactness: locally finite refinements exist\nEvery open cover has a locally finite refinement",
        "type_info": "ParacompactPropertyVariant"
      }
    ]
  },
  {
    "name": "ParacompactPropertyVariant",
    "docs": "",
    "kind": "enum",
    "members": [
      {
        "name": "Paracompact",
        "docs": "Every open cover has locally finite refinement",
        "type_info": null
      },
      {
        "name": "NonParacompact",
        "docs": "Not paracompact",
        "type_info": null
      }
    ]
  },
  {
    "name": "CountablePropertyVariant",
    "docs": "",
    "kind": "enum",
    "members": [
      {
        "name": "Countable",
        "docs": "Has cardinality ≤ ℵ₀",
        "type_info": null
      },
      {
        "name": "Uncountable",
        "docs": "Has cardinality > ℵ₀",
        "type_info": null
      }
    ]
  },
  {
    "name": "SeparablePropertyVariant",
    "docs": "",
    "kind": "enum",
    "members": [
      {
        "name": "Separable",
        "docs": "Has countable dense subset\n∃ countable D⊆X: D̄ = X",
        "type_info": null
      },
      {
        "name": "NonSeparable",
        "docs": "Not separable",
        "type_info": null
      }
    ]
  },
  {
    "name": "ConnectednessPropertyVariant",
    "docs": "Variants of connectedness for topological spaces",
    "kind": "enum",
    "members": [
      {
        "name": "Connected",
        "docs": "Space cannot be disconnected by open sets\nIf X = U∪V with U,V open and U∩V=∅, then U=∅ or V=∅",
        "type_info": "VariantSet<ConnectedProperty>"
      },
      {
        "name": "Disconnected",
        "docs": "Space can be split into disjoint open sets\n∃U,V open: X = U∪V, U∩V=∅, U≠∅, V≠∅",
        "type_info": null
      }
    ]
  },
  {
    "name": "ConnectedProperty",
    "docs": "Connectedness property of topological spaces\nA space X is connected if it cannot be written as a union of two disjoint\nnon-empty open sets. Formally:\n- If X = U∪V with U,V open and U∩V=∅, then U=∅ or V=∅\n- This is equivalent to having no proper clopen subsets",
    "kind": "enum",
    "members": [
      {
        "name": "Locality",
        "docs": "Where the connectedness property holds",
        "type_info": "TopologicalLocalityPropertyVariant"
      },
      {
        "name": "Coverage",
        "docs": "Extent of connectedness in the space",
        "type_info": "TopologicalCoveragePropertyVariant"
      },
      {
        "name": "ConnectionType",
        "docs": "Type of connectedness (path, arc, local)",
        "type_info": "ConnectionTypePropertyVariant"
      }
    ]
  },
  {
    "name": "ConnectionTypePropertyVariant",
    "docs": "",
    "kind": "enum",
    "members": [
      {
        "name": "PathConnected",
        "docs": "Connected by continuous paths\n∀x,y ∃γ:[0,1]→X continuous: γ(0)=x, γ(1)=y",
        "type_info": null
      },
      {
        "name": "ArcConnected",
        "docs": "Connected by injective continuous paths",
        "type_info": null
      },
      {
        "name": "LocallyConnected",
        "docs": "Connected in neighborhoods",
        "type_info": null
      },
      {
        "name": "NotConnected",
        "docs": "Not connected in any way",
        "type_info": null
      }
    ]
  },
  {
    "name": "CompactnessPropertyVariant",
    "docs": "Variants of compactness for topological spaces",
    "kind": "enum",
    "members": [
      {
        "name": "Compact",
        "docs": "Every open cover has a finite subcover\nFor any open cover {Uᵢ}ᵢ∈I, ∃ finite J⊆I: X = ⋃ᵢ∈J Uᵢ",
        "type_info": "VariantSet<CompactProperty>"
      },
      {
        "name": "NonCompact",
        "docs": "Some open cover has no finite subcover\n∃ open cover with no finite subcover",
        "type_info": null
      }
    ]
  },
  {
    "name": "CompactProperty",
    "docs": "Compactness property of topological spaces\nA space is compact if every open cover has a finite subcover.\nEquivalent characterizations:\n- Every open cover has a finite subcover\n- Every net has a convergent subnet\n- Every ultrafilter is convergent\n- Every collection of closed sets with FIP has non-empty intersection",
    "kind": "enum",
    "members": [
      {
        "name": "Locality",
        "docs": "Where the compactness property holds",
        "type_info": "TopologicalLocalityPropertyVariant"
      },
      {
        "name": "Coverage",
        "docs": "Extent of compactness in the space",
        "type_info": "TopologicalCoveragePropertyVariant"
      },
      {
        "name": "CompactnessType",
        "docs": "Type of compactness (sequential, countable)",
        "type_info": "CompactnessTypePropertyVariant"
      }
    ]
  },
  {
    "name": "CompactnessTypePropertyVariant",
    "docs": "",
    "kind": "enum",
    "members": [
      {
        "name": "SequentiallyCompact",
        "docs": "Every sequence has convergent subsequence\n(xₙ) bounded ⟹ ∃(xₙₖ) convergent",
        "type_info": null
      },
      {
        "name": "CountablyCompact",
        "docs": "Every countable cover has finite subcover",
        "type_info": null
      },
      {
        "name": "NotCompact",
        "docs": "Not compact in any sense",
        "type_info": null
      }
    ]
  },
  {
    "name": "TopologicalSpace",
    "docs": "A topological space (X,τ) consists of:\n- A set X of points\n- A topology τ (collection of open sets)\n\nThe topology τ determines:\n- Continuity: f: X → Y is continuous iff f⁻¹(V) is open in X for all open V in Y\n- Convergence: xₙ → x iff every open set containing x contains all but finitely many xₙ\n- Connectedness: X cannot be written as union of two disjoint non-empty open sets\n- Compactness: Every open cover has a finite subcover",
    "kind": "struct",
    "members": [
      {
        "name": "base_set",
        "type": "Set",
        "docs": "The underlying set X of points"
      },
      {
        "name": "topology",
        "type": "Topology",
        "docs": "The topology τ (collection of open sets)"
      },
      {
        "name": "properties",
        "type": "Vec<TopologicalSpaceProperty>",
        "docs": "Additional properties specific to the space as a whole"
      }
    ]
  },
  {
    "name": "TopologicalSpaceProperty",
    "docs": "Properties specific to topological spaces",
    "kind": "enum",
    "members": [
      {
        "name": "Separation",
        "docs": "Separation axioms (T0 through T4)",
        "type_info": "SeparationAxiomLevel"
      },
      {
        "name": "Compact",
        "docs": "Compactness properties",
        "type_info": "CompactnessType"
      },
      {
        "name": "Connected",
        "docs": "Connectedness properties",
        "type_info": "ConnectednessType"
      },
      {
        "name": "Metrizable",
        "docs": "Metrizability properties",
        "type_info": "MetrizabilityType"
      }
    ]
  },
  {
    "name": "SeparationAxiomLevel",
    "docs": "Separation axioms in topology form a hierarchy of increasingly strong conditions\non how points and closed sets can be separated by open sets.",
    "kind": "enum",
    "members": [
      {
        "name": "T0",
        "docs": "T₀ (Kolmogorov): For any two distinct points x,y ∈ X, there exists an open set\ncontaining exactly one of them",
        "type_info": null
      },
      {
        "name": "T1",
        "docs": "T₁ (Fréchet): For any two distinct points x,y ∈ X, there exists an open set\ncontaining x but not y",
        "type_info": null
      },
      {
        "name": "T2",
        "docs": "T₂ (Hausdorff): Any two distinct points can be separated by disjoint open sets",
        "type_info": null
      },
      {
        "name": "T2_5",
        "docs": "T₂.₅ (Urysohn): Any two distinct points can be separated by a continuous function",
        "type_info": null
      },
      {
        "name": "T3",
        "docs": "T₃ (Regular Hausdorff): Any point and closed set can be separated by disjoint open sets",
        "type_info": null
      },
      {
        "name": "T4",
        "docs": "T₄ (Normal Hausdorff): Any two disjoint closed sets can be separated by disjoint open sets",
        "type_info": null
      }
    ]
  },
  {
    "name": "CompactnessType",
    "docs": "Types of compactness in topology",
    "kind": "enum",
    "members": [
      {
        "name": "Compact",
        "docs": "Every open cover has a finite subcover",
        "type_info": null
      },
      {
        "name": "Sequentially",
        "docs": "Every sequence has a convergent subsequence",
        "type_info": null
      },
      {
        "name": "LocallyCompact",
        "docs": "Every closed and bounded set is compact",
        "type_info": null
      },
      {
        "name": "OnePointCompactification",
        "docs": "Compact after adding a single point",
        "type_info": null
      }
    ]
  },
  {
    "name": "ConnectednessType",
    "docs": "Types of connectedness in topology",
    "kind": "enum",
    "members": [
      {
        "name": "Connected",
        "docs": "Cannot be written as union of two disjoint non-empty open sets",
        "type_info": null
      },
      {
        "name": "PathConnected",
        "docs": "Every two points can be joined by a continuous path",
        "type_info": null
      },
      {
        "name": "TotallyDisconnected",
        "docs": "Every component is a singleton",
        "type_info": null
      },
      {
        "name": "Continuum",
        "docs": "Connected and compact",
        "type_info": null
      }
    ]
  },
  {
    "name": "MetrizabilityType",
    "docs": "Types of metrizability in topology",
    "kind": "enum",
    "members": [
      {
        "name": "Metrizable",
        "docs": "Space admits a metric inducing its topology",
        "type_info": null
      },
      {
        "name": "CompletelyMetrizable",
        "docs": "Space admits a complete metric",
        "type_info": null
      },
      {
        "name": "NonCompletelyMetrizable",
        "docs": "Space admits a metric but is not complete",
        "type_info": null
      }
    ]
  },
  {
    "name": "TopologicalMetricSpaceProperty",
    "docs": "Properties specific to metric spaces in topology",
    "kind": "enum",
    "members": [
      {
        "name": "Complete",
        "docs": "Whether the space is complete",
        "type_info": "bool"
      },
      {
        "name": "Compact",
        "docs": "Whether the space is compact",
        "type_info": "bool"
      },
      {
        "name": "Separable",
        "docs": "Whether the space is separable",
        "type_info": "bool"
      },
      {
        "name": "Proper",
        "docs": "Whether the space is proper (closed balls are compact)",
        "type_info": "bool"
      },
      {
        "name": "Bounded",
        "docs": "Whether the space is bounded",
        "type_info": "bool"
      },
      {
        "name": "TotallyBounded",
        "docs": "Whether the space is totally bounded",
        "type_info": "bool"
      },
      {
        "name": "LocallyCompact",
        "docs": "Whether the space is locally compact",
        "type_info": "bool"
      }
    ]
  },
  {
    "name": "MetricSpace",
    "docs": "A metric space is a set M together with a distance function (metric) that defines\na notion of distance between elements of the set.\nThe metric must satisfy:\n1. d(x,y) ≥ 0 (non-negativity)\n2. d(x,y) = 0 iff x = y (identity of indiscernibles)\n3. d(x,y) = d(y,x) (symmetry)\n4. d(x,z) ≤ d(x,y) + d(y,z) (triangle inequality)",
    "kind": "struct",
    "members": [
      {
        "name": "set",
        "type": "Set",
        "docs": "The underlying set"
      },
      {
        "name": "metric",
        "type": "Metric",
        "docs": "The metric/distance function"
      },
      {
        "name": "properties",
        "type": "VariantSet<TopologicalMetricSpaceProperty>",
        "docs": "Properties of the metric space"
      }
    ]
  },
  {
    "name": "AffineSpaceProperty",
    "docs": "Properties specific to affine spaces",
    "kind": "enum",
    "members": [
      {
        "name": "Dimension",
        "docs": "Dimension of the affine space",
        "type_info": "u32"
      },
      {
        "name": "ScalarField",
        "docs": "Whether the space is real or complex",
        "type_info": "ScalarFieldType"
      },
      {
        "name": "Complete",
        "docs": "Whether the space is complete",
        "type_info": "bool"
      }
    ]
  },
  {
    "name": "FiberBundleProperty",
    "docs": "Properties specific to fiber bundles",
    "kind": "enum",
    "members": [
      {
        "name": "Trivial",
        "docs": "Whether the bundle is trivial",
        "type_info": "bool"
      },
      {
        "name": "LocallyTrivial",
        "docs": "Whether the bundle is locally trivial",
        "type_info": "bool"
      },
      {
        "name": "Principal",
        "docs": "Whether the bundle is principal",
        "type_info": "bool"
      },
      {
        "name": "VectorBundle",
        "docs": "Whether the bundle is vector bundle",
        "type_info": "bool"
      }
    ]
  },
  {
    "name": "ProjectiveSpaceProperty",
    "docs": "Properties specific to projective spaces",
    "kind": "enum",
    "members": [
      {
        "name": "Dimension",
        "docs": "Dimension of the projective space",
        "type_info": "u32"
      },
      {
        "name": "ScalarField",
        "docs": "Whether the space is real or complex",
        "type_info": "ScalarFieldType"
      },
      {
        "name": "Smooth",
        "docs": "Whether the space is smooth",
        "type_info": "bool"
      }
    ]
  },
  {
    "name": "ScalarFieldType",
    "docs": "Types of scalar fields",
    "kind": "enum",
    "members": [
      {
        "name": "Real",
        "docs": "Real numbers",
        "type_info": null
      },
      {
        "name": "Complex",
        "docs": "Complex numbers",
        "type_info": null
      },
      {
        "name": "Rational",
        "docs": "Rational numbers",
        "type_info": null
      },
      {
        "name": "Finite",
        "docs": "Finite field",
        "type_info": "u32"
      }
    ]
  },
  {
    "name": "CompletenessPropertyVariant",
    "docs": "Variants of completeness properties",
    "kind": "enum",
    "members": [
      {
        "name": "Complete",
        "docs": "Complete metric space",
        "type_info": null
      },
      {
        "name": "Incomplete",
        "docs": "Not complete",
        "type_info": null
      },
      {
        "name": "Completable",
        "docs": "Completable",
        "type_info": null
      }
    ]
  },
  {
    "name": "SeparabilityPropertyVariant",
    "docs": "Variants of separability properties",
    "kind": "enum",
    "members": [
      {
        "name": "Separable",
        "docs": "Separable metric space",
        "type_info": null
      },
      {
        "name": "NonSeparable",
        "docs": "Not separable",
        "type_info": null
      },
      {
        "name": "SecondCountable",
        "docs": "Second countable",
        "type_info": null
      }
    ]
  },
  {
    "name": "MetricCompletion",
    "docs": "A metric space completion is a complete metric space that contains the original space as a dense subset",
    "kind": "struct",
    "members": [
      {
        "name": "original_space",
        "type": "MetricSpace",
        "docs": "The original metric space"
      },
      {
        "name": "completion",
        "type": "MetricSpace",
        "docs": "The completion (complete metric space)"
      },
      {
        "name": "inclusion_map",
        "type": "String",
        "docs": "The inclusion map from original space to completion"
      },
      {
        "name": "properties",
        "type": "VariantSet<CompletionProperty>",
        "docs": "Properties of the completion"
      }
    ]
  },
  {
    "name": "CompletionProperty",
    "docs": "Properties specific to metric space completions",
    "kind": "enum",
    "members": [
      {
        "name": "Unique",
        "docs": "Whether the completion is unique up to isometry",
        "type_info": "bool"
      },
      {
        "name": "DenseEmbedding",
        "docs": "Whether the original space is dense in the completion",
        "type_info": "bool"
      },
      {
        "name": "PreservesStructure",
        "docs": "Whether the completion preserves additional structure (e.g. group structure)",
        "type_info": "bool"
      }
    ]
  },
  {
    "name": "Metric",
    "docs": "Metric structure\nA function d: X × X → ℝ satisfying:\n1. d(x,y) ≥ 0 and d(x,y) = 0 iff x = y (positive definiteness)\n2. d(x,y) = d(y,x) (symmetry)\n3. d(x,z) ≤ d(x,y) + d(y,z) (triangle inequality)",
    "kind": "struct",
    "members": [
      {
        "name": "properties",
        "type": "VariantSet<MetricProperty>",
        "docs": "Properties of the metric (completeness, boundedness, etc.)"
      }
    ]
  },
  {
    "name": "MetricProperty",
    "docs": "",
    "kind": "enum",
    "members": [
      {
        "name": "Continuity",
        "docs": "Continuity of the metric function\n(x,y) ↦ d(x,y) is continuous from X×X to ℝ",
        "type_info": "TopologicalContinuityPropertyVariant"
      },
      {
        "name": "Boundedness",
        "docs": "Boundedness of distances\n∃M>0: d(x,y) ≤ M for all x,y",
        "type_info": "TopologicalBoundednessPropertyVariant"
      },
      {
        "name": "Geodesic",
        "docs": "Geodesic property: existence of length-minimizing paths\n∃ path γ: d(x,y) = length(γ) connecting x to y",
        "type_info": "GeodesicPropertyVariant"
      },
      {
        "name": "LengthSpace",
        "docs": "Length space property: distance as infimum of path lengths\nd(x,y) = inf{length(γ): γ connects x to y}",
        "type_info": "LengthSpacePropertyVariant"
      },
      {
        "name": "IsometryGroup",
        "docs": "Isometry group: symmetries preserving distance\nGroup of maps T: d(Tx,Ty) = d(x,y)",
        "type_info": "IsometryGroupPropertyVariant"
      },
      {
        "name": "UniformStructure",
        "docs": "Uniform structure: compatible uniformity\nTopology induced by d agrees with given uniform structure",
        "type_info": "UniformStructurePropertyVariant"
      }
    ]
  },
  {
    "name": "UniformStructurePropertyVariant",
    "docs": "",
    "kind": "enum",
    "members": [
      {
        "name": "Uniform",
        "docs": "Has compatible uniform structure\nTopology from uniformity agrees with given topology",
        "type_info": null
      },
      {
        "name": "NonUniform",
        "docs": "No compatible uniform structure",
        "type_info": null
      }
    ]
  },
  {
    "name": "IsometryGroupPropertyVariant",
    "docs": "",
    "kind": "enum",
    "members": [
      {
        "name": "HasIsometryGroup",
        "docs": "Has non-trivial isometry group\n∃T≠id: d(Tx,Ty) = d(x,y) for all x,y",
        "type_info": null
      },
      {
        "name": "NoIsometryGroup",
        "docs": "No non-trivial isometries",
        "type_info": null
      }
    ]
  },
  {
    "name": "LengthSpacePropertyVariant",
    "docs": "",
    "kind": "enum",
    "members": [
      {
        "name": "LengthSpace",
        "docs": "Distance is infimum of path lengths\nd(x,y) = inf{length(γ): γ connects x to y}",
        "type_info": null
      },
      {
        "name": "NonLengthSpace",
        "docs": "Not a length space",
        "type_info": null
      }
    ]
  },
  {
    "name": "GeodesicPropertyVariant",
    "docs": "",
    "kind": "enum",
    "members": [
      {
        "name": "Geodesic",
        "docs": "Distance realized by length of path\n∃ path γ: d(x,y) = length(γ)",
        "type_info": null
      },
      {
        "name": "NonGeodesic",
        "docs": "Not geodesic",
        "type_info": null
      }
    ]
  },
  {
    "name": "TopologicalBoundednessPropertyVariant",
    "docs": "Variants of boundedness for topological spaces",
    "kind": "enum",
    "members": [
      {
        "name": "Bounded",
        "docs": "Space is bounded in some metric\n∃ metric d, x₀,r: X ⊆ B(x₀,r)",
        "type_info": "VariantSet<TopologicalBoundedProperty>"
      },
      {
        "name": "Unbounded",
        "docs": "Space is not bounded in any metric\n∀ metric d, x₀,r: X ⊈ B(x₀,r)",
        "type_info": null
      }
    ]
  },
  {
    "name": "TopologicalBoundedProperty",
    "docs": "Properties modifying bounded topological spaces",
    "kind": "enum",
    "members": [
      {
        "name": "Locality",
        "docs": "Where the boundedness holds",
        "type_info": "TopologicalLocalityPropertyVariant"
      },
      {
        "name": "Coverage",
        "docs": "Extent of boundedness",
        "type_info": "TopologicalCoveragePropertyVariant"
      },
      {
        "name": "BoundednessType",
        "docs": "Type of boundedness",
        "type_info": "TopologicalBoundednessTypeVariant"
      }
    ]
  },
  {
    "name": "TopologicalBoundednessTypeVariant",
    "docs": "Types of boundedness in topology",
    "kind": "enum",
    "members": [
      {
        "name": "MetricBounded",
        "docs": "Bounded in metric sense",
        "type_info": null
      },
      {
        "name": "MeasureBounded",
        "docs": "Bounded in measure sense",
        "type_info": null
      },
      {
        "name": "OrderBounded",
        "docs": "Bounded in order sense",
        "type_info": null
      }
    ]
  },
  {
    "name": "TopologicalContinuityPropertyVariant",
    "docs": "Variants of continuity for topological spaces",
    "kind": "enum",
    "members": [
      {
        "name": "Continuous",
        "docs": "Function preserves topology\nInverse images of open sets are open",
        "type_info": "VariantSet<TopologicalContinuousProperty>"
      },
      {
        "name": "Discontinuous",
        "docs": "Function does not preserve topology\nSome inverse image of open set is not open",
        "type_info": null
      }
    ]
  },
  {
    "name": "TopologicalContinuousProperty",
    "docs": "Properties modifying continuous functions in topology",
    "kind": "enum",
    "members": [
      {
        "name": "Locality",
        "docs": "Where the continuity holds",
        "type_info": "TopologicalLocalityPropertyVariant"
      },
      {
        "name": "Coverage",
        "docs": "Extent of continuity",
        "type_info": "TopologicalCoveragePropertyVariant"
      },
      {
        "name": "ContinuityType",
        "docs": "Type of continuity",
        "type_info": "TopologicalContinuityTypeVariant"
      }
    ]
  },
  {
    "name": "TopologicalContinuityTypeVariant",
    "docs": "Types of continuity in topology",
    "kind": "enum",
    "members": [
      {
        "name": "Continuous",
        "docs": "Continuous everywhere",
        "type_info": null
      },
      {
        "name": "ContinuousAtPoint",
        "docs": "Continuous at a point",
        "type_info": null
      },
      {
        "name": "UniformlyContinuous",
        "docs": "Uniformly continuous",
        "type_info": null
      }
    ]
  },
  {
    "name": "TopologicalLocalityPropertyVariant",
    "docs": "Locality variants for topological properties",
    "kind": "enum",
    "members": [
      {
        "name": "Global",
        "docs": "Property holds on entire space",
        "type_info": null
      },
      {
        "name": "Local",
        "docs": "Property holds on open neighborhoods",
        "type_info": null
      },
      {
        "name": "PointWise",
        "docs": "Property holds at points",
        "type_info": null
      },
      {
        "name": "OnCompact",
        "docs": "Property holds on compact sets",
        "type_info": null
      }
    ]
  },
  {
    "name": "TopologicalCoveragePropertyVariant",
    "docs": "Coverage variants for topological properties",
    "kind": "enum",
    "members": [
      {
        "name": "Complete",
        "docs": "Property holds everywhere",
        "type_info": null
      },
      {
        "name": "Dense",
        "docs": "Property holds on dense subset",
        "type_info": null
      },
      {
        "name": "Open",
        "docs": "Property holds on open subset",
        "type_info": null
      },
      {
        "name": "Closed",
        "docs": "Property holds on closed subset",
        "type_info": null
      }
    ]
  }
]