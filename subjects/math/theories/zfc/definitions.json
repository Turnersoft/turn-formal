[
  {
    "name": "SetElement",
    "docs": "Elements that can belong to sets",
    "kind": "enum",
    "members": [
      {
        "name": "Set",
        "docs": "A nested set (following ZFC's everything-is-a-set principle)",
        "type_info": "Box<Set>"
      },
      {
        "name": "Integer",
        "docs": "Primitive numeric element (for efficient computation)",
        "type_info": "i64"
      },
      {
        "name": "Symbol",
        "docs": "Named/symbolic element (for abstract sets)",
        "type_info": "String"
      },
      {
        "name": "Pair",
        "docs": "Ordered pair (a,b) - fundamental for relations/functions",
        "type_info": "(Box<SetElement>, Box<SetElement>)"
      },
      {
        "name": "Urelement",
        "docs": "Special marker for urelements (non-set objects in some set theories)",
        "type_info": "String"
      }
    ]
  },
  {
    "name": "ElementCondition",
    "docs": "A condition for set elements\nUsed in the Separation axiom to define subsets",
    "kind": "enum",
    "members": [
      {
        "name": "IsEmpty",
        "docs": "Element is empty",
        "type_info": null
      },
      {
        "name": "Contains",
        "docs": "Element contains a specific set element",
        "type_info": "Box<SetElement>"
      },
      {
        "name": "ContainedIn",
        "docs": "Element is contained in a specific set",
        "type_info": "Box<Set>"
      },
      {
        "name": "NotContainedIn",
        "docs": "Element is not contained in a specific set",
        "type_info": "Box<Set>"
      }
    ]
  },
  {
    "name": "SetProperty",
    "docs": "Properties that can be applied to any set\nThese properties help track mathematical characteristics of sets",
    "kind": "enum",
    "members": [
      {
        "name": "Cardinality",
        "docs": "The cardinality (size) of the set\nProperties:\n- Finite sets have specific size n\n- ℵ₀ for countably infinite sets\n- 2^ℵ₀ for continuum size\n- Higher cardinals for larger sets",
        "type_info": "CardinalityPropertyVariant"
      },
      {
        "name": "IsEmpty",
        "docs": "Whether the set is empty\nProperties:\n- Contains no elements\n- Is a subset of all sets\n- Unique up to extensionality\nExamples: ∅",
        "type_info": "bool"
      },
      {
        "name": "IsFinite",
        "docs": "Whether the set is finite\nProperties:\n- Has finite number of elements\n- Can be put in bijection with {0,1,...,n-1}\n- Every subset has minimal element\nExamples: {∅}, {∅,{∅}}, finite powersets",
        "type_info": "bool"
      },
      {
        "name": "IsCountable",
        "docs": "Whether the set is countable\nProperties:\n- Can be put in bijection with ℕ\n- Has cardinality ℵ₀ if infinite\n- Union of countable sets is countable\nExamples: ℕ, ℤ, ℚ",
        "type_info": "bool"
      },
      {
        "name": "IsWellOrdered",
        "docs": "Whether the set is well-ordered\nProperties:\n- Every non-empty subset has least element\n- Total ordering exists\n- Transfinite induction applies\nExamples: Ordinal numbers, ℕ with usual order",
        "type_info": "bool"
      },
      {
        "name": "IsTransitive",
        "docs": "Whether the set is transitive\nProperties:\n- If y ∈ x ∈ A then y ∈ A\n- Contains all elements of its elements\n- Important for ordinal numbers\nExamples: Ordinal numbers, von Neumann hierarchy",
        "type_info": "bool"
      },
      {
        "name": "IsOrdinal",
        "docs": "Whether the set is an ordinal number\nProperties:\n- Transitive set\n- Well-ordered by ∈\n- Represents position/rank\nExamples: 0 = ∅, 1 = {∅}, 2 = {∅,{∅}}",
        "type_info": "bool"
      },
      {
        "name": "IsCardinal",
        "docs": "Whether the set is a cardinal number\nProperties:\n- Initial ordinal of its cardinality class\n- Measures size of sets\n- Cannot be put in bijection with smaller ordinal\nExamples: ℵ₀, ℵ₁, finite cardinals",
        "type_info": "bool"
      },
      {
        "name": "IsReflexive",
        "docs": "Whether the relation is reflexive\nProperties:\n- For all x in domain, (x,x) is in the relation\n- Required for equivalence relations and partial orders\nExamples: =, ≤, ⊆",
        "type_info": "bool"
      },
      {
        "name": "IsSymmetric",
        "docs": "Whether the relation is symmetric\nProperties:\n- If (x,y) is in relation then (y,x) is also in relation\n- Required for equivalence relations\nExamples: =, ≠, \"is parallel to\"",
        "type_info": "bool"
      }
    ]
  },
  {
    "name": "CardinalityPropertyVariant",
    "docs": "Cardinality of a set\nRepresents the size of a set, including infinite cardinalities",
    "kind": "enum",
    "members": [
      {
        "name": "Finite",
        "docs": "Finite sets with specific size",
        "type_info": "usize"
      },
      {
        "name": "CountablyInfinite",
        "docs": "ℵ₀ (aleph-null) - countably infinite",
        "type_info": null
      },
      {
        "name": "ContinuumSize",
        "docs": "2^ℵ₀ - size of the continuum",
        "type_info": null
      },
      {
        "name": "LargerCardinal",
        "docs": "Higher cardinal numbers",
        "type_info": "usize"
      }
    ]
  },
  {
    "name": "OrdinalOpProperty",
    "docs": "Properties specific to ordinal operations",
    "kind": "enum",
    "members": [
      {
        "name": "PreservesWellOrdering",
        "docs": "Whether operation preserves well-ordering",
        "type_info": "bool"
      },
      {
        "name": "Associative",
        "docs": "Whether operation is associative",
        "type_info": "bool"
      },
      {
        "name": "Commutative",
        "docs": "Whether operation is commutative",
        "type_info": "bool"
      },
      {
        "name": "Identity",
        "docs": "Identity element for the operation",
        "type_info": "Box<Set>"
      },
      {
        "name": "DistributesOver",
        "docs": "Operation this one distributes over",
        "type_info": "Box<Set>"
      }
    ]
  },
  {
    "name": "SetOpProperty",
    "docs": "Properties specific to set-theoretic operations",
    "kind": "enum",
    "members": [
      {
        "name": "PreservesCardinality",
        "docs": "Whether operation preserves cardinality",
        "type_info": "bool"
      },
      {
        "name": "PreservesTransitivity",
        "docs": "Whether operation preserves transitivity",
        "type_info": "bool"
      },
      {
        "name": "SatisfiesExtensionality",
        "docs": "Whether operation satisfies extensionality",
        "type_info": "bool"
      },
      {
        "name": "Idempotent",
        "docs": "Whether operation is idempotent",
        "type_info": "bool"
      }
    ]
  },
  {
    "name": "GenericSet",
    "docs": "",
    "kind": "struct",
    "members": [
      {
        "name": "properties",
        "type": "VariantSet<SetProperty>",
        "docs": ""
      }
    ]
  },
  {
    "name": "Set",
    "docs": "A set in ZFC set theory, defined by its membership rule\nThis implementation follows the ZFC axioms and provides a foundation for set-theoretic constructions",
    "kind": "enum",
    "members": [
      {
        "name": "Generic",
        "docs": "A generic, abstract set (L1), or a set type defined by properties (L2).",
        "type_info": "GenericSet"
      },
      {
        "name": "Empty",
        "docs": "The empty set (∅), unique and contains no elements",
        "type_info": null
      },
      {
        "name": "Singleton",
        "docs": "Properties of the singleton set (e.g., cardinality = 1)",
        "type_info": "{\n        element: SetElement,\n        properties: VariantSet<SetProperty>,\n    }"
      },
      {
        "name": "Enumeration",
        "docs": "Properties of the enumerated set",
        "type_info": "{\n        elements: Vec<SetElement>,\n        properties: VariantSet<SetProperty>,\n    }"
      },
      {
        "name": "BinaryUnion",
        "docs": "Properties of the resulting union",
        "type_info": "{\n        left: Box<Set>,\n        right: Box<Set>,\n        properties: VariantSet<SetProperty>,\n        op_properties: VariantSet<SetOpProperty>,\n    }"
      },
      {
        "name": "BinaryIntersection",
        "docs": "Properties of the resulting intersection",
        "type_info": "{\n        left: Box<Set>,\n        right: Box<Set>,\n        properties: VariantSet<SetProperty>,\n        op_properties: VariantSet<SetOpProperty>,\n    }"
      },
      {
        "name": "SetDifference",
        "docs": "Properties of the resulting difference",
        "type_info": "{\n        left: Box<Set>,\n        right: Box<Set>,\n        properties: VariantSet<SetProperty>,\n        op_properties: VariantSet<SetOpProperty>,\n    }"
      },
      {
        "name": "SymmetricDifference",
        "docs": "Properties of the resulting symmetric difference",
        "type_info": "{\n        left: Box<Set>,\n        right: Box<Set>,\n        properties: VariantSet<SetProperty>,\n        op_properties: VariantSet<SetOpProperty>,\n    }"
      },
      {
        "name": "CartesianProduct",
        "docs": "Properties of the resulting product",
        "type_info": "{\n        left: Box<Set>,\n        right: Box<Set>,\n        properties: VariantSet<SetProperty>,\n        op_properties: VariantSet<SetOpProperty>,\n    }"
      },
      {
        "name": "BigUnion",
        "docs": "Properties of the resulting big union",
        "type_info": "{\n        family: Box<Set>,\n        properties: VariantSet<SetProperty>,\n        op_properties: VariantSet<SetOpProperty>,\n    }"
      },
      {
        "name": "BigIntersection",
        "docs": "Properties of the resulting big intersection",
        "type_info": "{\n        family: Box<Set>,\n        properties: VariantSet<SetProperty>,\n        op_properties: VariantSet<SetOpProperty>,\n    }"
      },
      {
        "name": "PowerSet",
        "docs": "Properties of the resulting power set",
        "type_info": "{\n        base: Box<Set>,\n        properties: VariantSet<SetProperty>,\n        op_properties: VariantSet<SetOpProperty>,\n    }"
      },
      {
        "name": "Separation",
        "docs": "Properties of the resulting set",
        "type_info": "{\n        source: Box<Set>,\n        condition: ElementCondition,\n        properties: VariantSet<SetProperty>,\n        op_properties: VariantSet<SetOpProperty>,\n    }"
      },
      {
        "name": "Replacement",
        "docs": "Properties of the resulting set",
        "type_info": "{\n        source: Box<Set>,\n        mapping: SetMapping,\n        properties: VariantSet<SetProperty>,\n        op_properties: VariantSet<SetOpProperty>,\n    }"
      },
      {
        "name": "OrderedPair",
        "docs": "Properties of the resulting ordered pair",
        "type_info": "{\n        first: Box<Set>,\n        second: Box<Set>,\n        properties: VariantSet<SetProperty>,\n        op_properties: VariantSet<SetOpProperty>,\n    }"
      },
      {
        "name": "Complement",
        "docs": "Properties of the resulting complement",
        "type_info": "{\n        set: Box<Set>,\n        universe: Box<Set>,\n        properties: VariantSet<SetProperty>,\n        op_properties: VariantSet<SetOpProperty>,\n    }"
      },
      {
        "name": "Parametric",
        "docs": "Properties of the parametric set",
        "type_info": "{\n        parameters: HashMap<String, String>,\n        description: String,\n        membership_condition: String,\n        properties: VariantSet<SetProperty>,\n    }"
      }
    ]
  },
  {
    "name": "SetExpression",
    "docs": "SetExpression represents expressions involving sets that don't return sets\nThese include actions, morphisms, functions, and other operations",
    "kind": "enum",
    "members": [
      {
        "name": "Variable",
        "docs": "A variable representing a set",
        "type_info": "Identifier"
      },
      {
        "name": "Cardinality",
        "docs": "The cardinality of a set: |A|",
        "type_info": "{ set: Box<Parametrizable<Set>> }"
      },
      {
        "name": "ElementSelection",
        "docs": "Selection of an element from a set (choice function)",
        "type_info": "{ set: Box<Parametrizable<Set>> }"
      }
    ]
  },
  {
    "name": "SetRelation",
    "docs": "Relations between sets, capturing the predicate structure of set theory",
    "kind": "enum",
    "members": [
      {
        "name": "ElementOf",
        "docs": "Element relation: x ∈ A",
        "type_info": "{\n        element: Parametrizable<SetElement>,\n        set: Parametrizable<Set>,\n    }"
      },
      {
        "name": "SubsetOf",
        "docs": "Subset relation: A ⊆ B",
        "type_info": "{\n        subset: Parametrizable<Set>,\n        superset: Parametrizable<Set>,\n    }"
      },
      {
        "name": "ProperSubsetOf",
        "docs": "Proper subset relation: A ⊂ B",
        "type_info": "{\n        subset: Parametrizable<Set>,\n        superset: Parametrizable<Set>,\n    }"
      },
      {
        "name": "Equals",
        "docs": "Set equality: A = B",
        "type_info": "{\n        left: Parametrizable<Set>,\n        right: Parametrizable<Set>,\n    }"
      },
      {
        "name": "AreDisjoint",
        "docs": "Disjoint sets: A ∩ B = ∅",
        "type_info": "{\n        left: Parametrizable<Set>,\n        right: Parametrizable<Set>,\n    }"
      },
      {
        "name": "HasCardinality",
        "docs": "Set has cardinality n: |A| = n",
        "type_info": "{\n        set: Parametrizable<Set>,\n        cardinality: Parametrizable<CardinalityPropertyVariant>,\n    }"
      },
      {
        "name": "IsCountable",
        "docs": "Set is countable: A is countable",
        "type_info": "{ set: Parametrizable<Set> }"
      },
      {
        "name": "IsFinite",
        "docs": "Set is finite: A is finite",
        "type_info": "{ set: Parametrizable<Set> }"
      },
      {
        "name": "IsEmpty",
        "docs": "Set is empty: A = ∅",
        "type_info": "{ set: Parametrizable<Set> }"
      },
      {
        "name": "CardinalityLessThan",
        "docs": "Cardinality comparison: |A| < |B|",
        "type_info": "{\n        left: Parametrizable<Set>,\n        right: Parametrizable<Set>,\n    }"
      },
      {
        "name": "CardinalityLessThanOrEqual",
        "docs": "Cardinality comparison: |A| ≤ |B|",
        "type_info": "{\n        left: Parametrizable<Set>,\n        right: Parametrizable<Set>,\n    }"
      },
      {
        "name": "AreEquinumerous",
        "docs": "Sets are equivalent/equinumerous: A ~ B (same cardinality)",
        "type_info": "{\n        left: Parametrizable<Set>,\n        right: Parametrizable<Set>,\n    }"
      }
    ]
  },
  {
    "name": "SetMapping",
    "docs": "Mapping functions that can be applied to set elements\nUsed in the Replacement axiom to construct new sets",
    "kind": "enum",
    "members": [
      {
        "name": "Identity",
        "docs": "Identity function f(x) = x",
        "type_info": null
      },
      {
        "name": "Singleton",
        "docs": "Singleton function f(x) = {x}",
        "type_info": null
      },
      {
        "name": "FirstProjection",
        "docs": "First projection π₁((x,y)) = x",
        "type_info": null
      },
      {
        "name": "SecondProjection",
        "docs": "Second projection π₂((x,y)) = y",
        "type_info": null
      },
      {
        "name": "Composition",
        "docs": "Function composition (g ∘ f)(x) = g(f(x))",
        "type_info": "(Box<SetMapping>, Box<SetMapping>)"
      },
      {
        "name": "Custom",
        "docs": "Custom mapping defined by a string representation",
        "type_info": "String"
      }
    ]
  }
]